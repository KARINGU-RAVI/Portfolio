{"file_contents":{"README.md":{"content":"\"# Portfolio-2\" \n","size_bytes":17},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Portfolio Website\n\n## Overview\n\nThis is a modern, AI-powered personal portfolio website for Ravi Karingu, a Full Stack Developer and AI Enthusiast. The application showcases professional experience, skills, projects, and achievements through an interactive single-page application with advanced features including AI-powered search capabilities using Google's Gemini API.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript, built using Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with custom design system using CSS variables for theming\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible components\n- **Animations**: Framer Motion for smooth animations and transitions throughout the application\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme System**: Custom theme provider supporting light/dark mode with localStorage persistence\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the entire application\n- **API Design**: RESTful endpoints for portfolio search and contact form submissions\n- **Development**: Hot module replacement and development server integration with Vite\n- **Build System**: ESBuild for fast production builds of the server code\n\n### Data Storage Solutions\n- **Database**: PostgreSQL configured through Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Development Storage**: In-memory storage implementation for development/testing environments\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n\n### Authentication and Authorization\n- Currently uses basic session-based approach (can be extended for user authentication)\n- No complex auth system implemented, suitable for a personal portfolio\n\n### Key Features Implementation\n- **AI-Powered Search**: Google Gemini API integration for natural language portfolio queries\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Performance Optimization**: Lazy loading, image optimization, and efficient rendering\n- **SEO Ready**: Meta tags, structured data, and server-side rendering capabilities\n- **Interactive Elements**: Smooth scrolling, hover effects, and dynamic content loading\n\n### Component Architecture\n- **Modular Design**: Reusable components for different portfolio sections (Hero, Experience, Skills, Projects, etc.)\n- **Data-Driven**: Portfolio content managed through structured data files\n- **Accessibility**: ARIA labels, keyboard navigation, and screen reader support\n- **Performance**: Optimized re-renders and efficient state updates\n\n## External Dependencies\n\n### Core Technologies\n- **Database**: PostgreSQL with Neon Database serverless connection\n- **AI Service**: Google Gemini API for intelligent portfolio search functionality\n- **Styling**: Tailwind CSS with PostCSS for processing\n- **Icons**: Lucide React for consistent iconography\n\n### Development Tools\n- **Build Tools**: Vite for frontend bundling, ESBuild for backend compilation\n- **Type Checking**: TypeScript compiler for static type analysis\n- **Database Tools**: Drizzle ORM and Drizzle Kit for database management\n- **Development**: TSX for running TypeScript files in development\n\n### Third-Party Integrations\n- **Analytics**: Ready for integration with analytics services\n- **Contact Forms**: Backend API endpoints for handling contact submissions\n- **GitHub API**: For displaying live GitHub activity and repository information\n- **Cloud Storage**: Cloudinary integration for optimized image delivery\n\n### UI and Animation Libraries\n- **Component Library**: Radix UI primitives for accessible base components\n- **Animation**: Framer Motion for complex animations and page transitions\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Date Utilities**: date-fns for date formatting and manipulation\n\n### Communication Tools\n- **WhatsApp Integration**: Direct messaging capability through WhatsApp API\n- **Email Services**: Ready for integration with email service providers\n- **Social Media**: Links and integrations with professional social platforms\n\nThe application is designed to be easily deployable on platforms like Replit, Vercel, or Netlify, with environment-based configuration for different deployment scenarios.","size_bytes":4642},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1755754611114.md":{"content":"","size_bytes":0},"attached_assets/content-1755754623894.md":{"content":"","size_bytes":0},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { GoogleGenAI } from \"@google/genai\";\nimport { insertPortfolioSearchSchema, insertContactMessageSchema } from \"@shared/schema\";\nimport { portfolioData } from \"../client/src/data/portfolio-data\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // AI-powered portfolio search endpoint\n  app.post(\"/api/portfolio-search\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || typeof query !== \"string\") {\n        return res.status(400).json({ error: \"Query is required and must be a string\" });\n      }\n\n      if (!process.env.GEMINI_API_KEY) {\n        return res.status(500).json({ error: \"Gemini API key not configured\" });\n      }\n\n      // Create a detailed prompt for Gemini\n      const systemPrompt = `You are an intelligent AI assistant for Ravi Karingu's personal portfolio. \nYour task is to analyze the user's query and the provided JSON data about Ravi's career. \nReturn only a JSON array of the unique 'id' fields of the items that best match the query.\nIf no items match, return an empty array.\n\nPortfolio Data: ${JSON.stringify(portfolioData)}`;\n\n      const userPrompt = `User Query: \"${query}\"\n\nPlease analyze this query against Ravi's portfolio data and return the IDs of relevant items that match the query.`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: { type: \"string\" }\n              }\n            },\n            required: [\"results\"]\n          },\n        },\n        contents: userPrompt,\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Empty response from Gemini API\");\n      }\n\n      const parsedResponse = JSON.parse(rawJson);\n      const results = parsedResponse.results || [];\n\n      // Save the search to storage\n      await storage.savePortfolioSearch({\n        query,\n        results: JSON.stringify(results),\n      });\n\n      res.json({ results });\n    } catch (error) {\n      console.error(\"Portfolio search error:\", error);\n      res.status(500).json({ error: \"Failed to process search query\" });\n    }\n  });\n\n  // AI Chatbot endpoint\n  app.post(\"/api/chatbot\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      \n      if (!message || typeof message !== \"string\") {\n        return res.status(400).json({ error: \"Message is required and must be a string\" });\n      }\n\n      if (!process.env.GEMINI_API_KEY) {\n        return res.status(500).json({ error: \"Gemini API key not configured\" });\n      }\n\n      // Create a comprehensive system prompt\n      const systemPrompt = `You are an AI assistant specifically designed to answer questions about Ravi Karingu's professional portfolio and career. \n\nSTRICT GUIDELINES:\n1. You must ONLY provide information that is present in the portfolio data provided below\n2. Respond in a professional, concise manner\n3. If asked about something not in the portfolio data, clearly state: \"I can only provide information based on the portfolio content, and I don't have details on that topic here.\"\n4. Do not generate responses based on external knowledge\n5. Keep responses focused and directly answer the user's question\n6. When listing items, use the exact names/titles as they appear in the portfolio\n\nPortfolio Data: ${JSON.stringify(portfolioData)}\n\nRemember: You are representing Ravi Karingu's professional profile, so maintain a professional tone and only discuss information available in his portfolio.`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"text/plain\",\n        },\n        contents: message,\n      });\n\n      const botResponse = response.text;\n      if (!botResponse) {\n        throw new Error(\"Empty response from Gemini API\");\n      }\n\n      res.json({ response: botResponse });\n    } catch (error) {\n      console.error(\"Chatbot error:\", error);\n      res.status(500).json({ error: \"Failed to process message\" });\n    }\n  });\n\n  // Contact form submission endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.saveContactMessage(validatedData);\n      res.json({ success: true, messageId: message.id });\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      res.status(400).json({ error: \"Invalid form data\" });\n    }\n  });\n\n  // GitHub activity proxy endpoint (to avoid CORS issues)\n  app.get(\"/api/github-activity\", async (req, res) => {\n    try {\n      const username = \"KARINGU-RAVI\"; // GitHub username - should be actual username\n      const response = await fetch(`https://api.github.com/users/${username}/events?per_page=10`);\n      \n      if (!response.ok) {\n        throw new Error(`GitHub API responded with status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      res.json(data);\n    } catch (error) {\n      console.error(\"GitHub API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch GitHub activity\" });\n    }\n  });\n\n  // GitHub stats endpoint\n  app.get(\"/api/github-stats\", async (req, res) => {\n    try {\n      const username = \"KARINGU-RAVI\";\n      const [userResponse, reposResponse] = await Promise.all([\n        fetch(`https://api.github.com/users/${username}`),\n        fetch(`https://api.github.com/users/${username}/repos?per_page=100`)\n      ]);\n\n      if (!userResponse.ok || !reposResponse.ok) {\n        throw new Error(\"GitHub API request failed\");\n      }\n\n      const userData = await userResponse.json();\n      const reposData = await reposResponse.json();\n\n      const stats = {\n        repositories: userData.public_repos,\n        followers: userData.followers,\n        following: userData.following,\n        totalStars: reposData.reduce((acc: number, repo: any) => acc + repo.stargazers_count, 0),\n        totalForks: reposData.reduce((acc: number, repo: any) => acc + repo.forks_count, 0),\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"GitHub stats error:\", error);\n      res.status(500).json({ error: \"Failed to fetch GitHub stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6759},"server/storage.ts":{"content":"import { type PortfolioSearch, type InsertPortfolioSearch, type ContactMessage, type InsertContactMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  savePortfolioSearch(search: InsertPortfolioSearch): Promise<PortfolioSearch>;\n  saveContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getRecentSearches(limit?: number): Promise<PortfolioSearch[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private portfolioSearches: Map<string, PortfolioSearch>;\n  private contactMessages: Map<string, ContactMessage>;\n\n  constructor() {\n    this.portfolioSearches = new Map();\n    this.contactMessages = new Map();\n  }\n\n  async savePortfolioSearch(insertSearch: InsertPortfolioSearch): Promise<PortfolioSearch> {\n    const id = randomUUID();\n    const search: PortfolioSearch = {\n      ...insertSearch,\n      id,\n      timestamp: new Date(),\n    };\n    this.portfolioSearches.set(id, search);\n    return search;\n  }\n\n  async saveContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = {\n      ...insertMessage,\n      id,\n      timestamp: new Date(),\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getRecentSearches(limit = 10): Promise<PortfolioSearch[]> {\n    return Array.from(this.portfolioSearches.values())\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1543},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const portfolioSearches = pgTable(\"portfolio_searches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  query: text(\"query\").notNull(),\n  results: text(\"results\").notNull(), // JSON string of search results\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const insertPortfolioSearchSchema = createInsertSchema(portfolioSearches).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertPortfolioSearch = z.infer<typeof insertPortfolioSearchSchema>;\nexport type PortfolioSearch = typeof portfolioSearches.$inferSelect;\n\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n","size_bytes":1360},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-sans);\n    font-weight: 600;\n  }\n}\n\n@layer components {\n  .highlight-search-result {\n    @apply bg-blue-100 dark:bg-blue-900/30 border-2 border-blue-500 rounded-lg;\n    animation: highlight-pulse 2s ease-in-out;\n  }\n}\n\n@layer utilities {\n  .text-gradient {\n    @apply bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;\n  }\n\n  .glass-morphism {\n    @apply bg-white/10 backdrop-blur-md border border-white/20;\n  }\n\n  .dark .glass-morphism {\n    @apply bg-black/10 backdrop-blur-md border border-white/10;\n  }\n}\n\n@keyframes highlight-pulse {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);\n  }\n  50% {\n    transform: scale(1.02);\n    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);\n  }\n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--background));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground) / 0.3);\n}\n\n/* Smooth scroll behavior */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Focus styles for accessibility */\n.focus-visible:focus-visible {\n  @apply outline-none ring-2 ring-blue-500 ring-offset-2;\n}\n\n/* Loading animation */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Enhanced hover effects for better UX */\n.hover-lift {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.hover-lift:hover {\n  transform: translateY(-4px) scale(1.02);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n.dark .hover-lift:hover {\n  box-shadow: 0 20px 40px rgba(255, 255, 255, 0.1);\n}\n\n/* Floating animation for elements */\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg); \n  }\n  50% { \n    transform: translateY(-10px) rotate(2deg); \n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n/* Pulse animation for loading states */\n@keyframes pulse-glow {\n  0%, 100% { \n    opacity: 1;\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);\n  }\n  50% { \n    opacity: 0.7;\n    box-shadow: 0 0 40px rgba(59, 130, 246, 0.6);\n  }\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n/* Typing animation for text */\n@keyframes typewriter {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n.typewriter {\n  display: inline-block;\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typewriter 3s steps(40, end);\n}\n\n/* Slide in animations */\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.slide-in-left {\n  animation: slideInLeft 0.6s ease-out;\n}\n\n.slide-in-right {\n  animation: slideInRight 0.6s ease-out;\n}\n\n/* Button hover effects */\n.btn-hover-effect {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.btn-hover-effect::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.5s;\n}\n\n.btn-hover-effect:hover::before {\n  left: 100%;\n}\n\n/* Glass morphism enhanced */\n.glass-card {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.dark .glass-card {\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  box-shadow: 0 8px 32px rgba(255, 255, 255, 0.05);\n}\n\n.glass-card:hover {\n  backdrop-filter: blur(25px);\n  transform: translateY(-2px);\n}\n","size_bytes":9665},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AchievementsSection.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { motion, useScroll, useTransform, useSpring } from 'framer-motion';\nimport { Trophy, Award, Medal, Star } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport portfolioData from '@/data/portfolio-data';\nimport { useEnhancedScrollAnimation, useContainerHoverEffect } from '@/hooks/useBidirectionalScroll';\n\nconst achievementIcons = {\n  trophy: Trophy,\n  award: Award,\n  medal: Medal,\n  star: Star,\n};\n\nconst getAchievementIcon = (title: string) => {\n  if (title.toLowerCase().includes('topper')) return 'trophy';\n  if (title.toLowerCase().includes('champion')) return 'medal';\n  if (title.toLowerCase().includes('gold')) return 'medal';\n  if (title.toLowerCase().includes('publication')) return 'star';\n  return 'award';\n};\n\nconst getAchievementColor = (title: string) => {\n  if (title.toLowerCase().includes('topper')) return 'from-yellow-500 to-orange-500';\n  if (title.toLowerCase().includes('champion')) return 'from-blue-500 to-purple-500';\n  if (title.toLowerCase().includes('gold')) return 'from-yellow-400 to-yellow-600';\n  if (title.toLowerCase().includes('publication')) return 'from-green-500 to-emerald-500';\n  return 'from-purple-500 to-pink-500';\n};\n\nexport default function AchievementsSection() {\n  const { achievements } = portfolioData;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const containerHover = useContainerHoverEffect();\n  \n  // Enhanced bidirectional scroll animations\n  const { scrollYProgress, scrollDirection } = useEnhancedScrollAnimation(containerRef, 0, achievements.length);\n  \n  // Smooth spring animations for 3D effects with bidirectional behavior\n  const y = useSpring(useTransform(scrollYProgress, [0, 1], [100, -100]));\n  const rotateX = useSpring(useTransform(scrollYProgress, [0, 0.5, 1], [15, 0, -15]));\n  const rotateY = useSpring(useTransform(scrollYProgress, [0, 1], [-5, 5]));\n  const opacity = useSpring(useTransform(scrollYProgress, [0, 0.15, 0.85, 1], [0, 1, 1, 0]));\n  \n  // Mouse tracking for 3D tilt effect\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        const x = (e.clientX - centerX) / (rect.width / 2);\n        const y = (e.clientY - centerY) / (rect.height / 2);\n        setMousePosition({ x: x * 10, y: y * 10 });\n      }\n    };\n\n    const handleMouseLeave = () => {\n      setMousePosition({ x: 0, y: 0 });\n    };\n\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener('mousemove', handleMouseMove);\n      container.addEventListener('mouseleave', handleMouseLeave);\n      \n      return () => {\n        container.removeEventListener('mousemove', handleMouseMove);\n        container.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, []);\n\n  return (\n    <section \n      id=\"achievements\" \n      ref={containerRef}\n      className=\"py-20 px-6 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-900 dark:via-slate-800 dark:to-indigo-900 relative overflow-hidden\"\n      style={{ perspective: '1000px' }}\n    >\n      {/* Enhanced 3D Background decoration */}\n      <motion.div \n        className=\"absolute inset-0 overflow-hidden\"\n        style={{\n          rotateX,\n          rotateY,\n          y: y.get() * 0.3,\n          opacity\n        }}\n      >\n        <motion.div \n          className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-r from-blue-400/20 to-purple-600/20 rounded-full blur-3xl\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [50, -200]),\n            x: useTransform(scrollYProgress, [0, 1], [0, 100]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [0.8, 1.2, 0.6])\n          }}\n        />\n        <motion.div \n          className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-r from-green-400/20 to-blue-600/20 rounded-full blur-3xl\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [-50, 200]),\n            x: useTransform(scrollYProgress, [0, 1], [0, -100]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [1.2, 0.8, 1.4])\n          }}\n        />\n        <motion.div \n          className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-purple-400/10 to-pink-600/10 rounded-full blur-3xl\"\n          style={{\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [0.5, 1.5, 0.7]),\n            rotate: useTransform(scrollYProgress, [0, 1], [0, 360])\n          }}\n        />\n      </motion.div>\n      \n      <motion.div \n        className=\"max-w-6xl mx-auto relative z-10\"\n        style={{\n          rotateX: mousePosition.y * 0.1,\n          rotateY: mousePosition.x * 0.1,\n          transformStyle: 'preserve-3d'\n        }}\n      >\n        <motion.div\n          initial={{ opacity: 0, y: 20, rotateX: 45 }}\n          whileInView={{ opacity: 1, y: 0, rotateX: 0 }}\n          transition={{ duration: 0.8, type: \"spring\", stiffness: 100 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n          style={{\n            transform: 'translateZ(50px)',\n            transformStyle: 'preserve-3d'\n          }}\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Achievements & Awards\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">Recognition for excellence and dedication</p>\n        </motion.div>\n        \n        <div \n          className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          style={{ transformStyle: 'preserve-3d' }}\n        >\n          {achievements.map((achievement, index) => {\n            const iconType = getAchievementIcon(achievement.title);\n            const IconComponent = achievementIcons[iconType as keyof typeof achievementIcons];\n            const colorGradient = getAchievementColor(achievement.title);\n            \n            // Enhanced bidirectional animation for each achievement\n            const achievementAnimation = useEnhancedScrollAnimation(containerRef, index, achievements.length);\n            const { angle, initialPosition, delay } = achievementAnimation;\n            \n            // Calculate 3D positioning based on grid position\n            const gridRow = Math.floor(index / 3);\n            const gridCol = index % 3;\n            const depthOffset = (gridRow % 2 === 0 ? gridCol : 2 - gridCol) * 20;\n            \n            return (\n              <motion.div\n                key={achievement.id}\n                initial={{ \n                  opacity: 0, \n                  y: 100, \n                  rotateY: -45,\n                  rotateX: 25,\n                  scale: 0.8\n                }}\n                animate={{\n                  opacity: achievementAnimation.opacity.get(),\n                  y: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? 100 : 0,\n                  rotateY: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? -45 : 0,\n                  rotateX: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? 25 : 0,\n                  scale: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? 0.8 : 1\n                }}\n                whileInView={{ \n                  opacity: 1, \n                  y: 0, \n                  rotateY: 0,\n                  rotateX: 0,\n                  scale: 1\n                }}\n                transition={{ \n                  duration: scrollDirection.direction === 'up' ? 1.0 : 1.4, \n                  delay: scrollDirection.direction === 'up' ? (achievements.length - index - 1) * 0.15 : delay,\n                  type: \"spring\",\n                  stiffness: 60,\n                  damping: 18,\n                  mass: 1.3\n                }}\n                viewport={{ once: false, amount: 0.3 }}\n\n                style={{\n                  transformStyle: 'preserve-3d',\n                  transform: `translateZ(${depthOffset}px)`,\n                }}\n                data-testid={`achievement-card-${achievement.id}`}\n              >\n                <motion.div\n                  className=\"h-full\"\n                >\n                  <Card className=\"h-full hover:shadow-2xl transition-all duration-500 border border-white/20 dark:border-slate-700/50 bg-gradient-to-br from-white/90 via-white/70 to-white/50 dark:from-slate-800/90 dark:via-slate-800/70 dark:to-slate-900/50 backdrop-blur-xl overflow-hidden hover:border-blue-200/40 dark:hover:border-blue-400/30\"\n                    style={{\n                      transformStyle: 'preserve-3d',\n                      boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.05)',\n                    }}\n                    data-testid={`achievement-card-content-${achievement.id}`}\n                  >\n                  {/* Enhanced 3D Achievement Image */}\n                  {achievement.image && (\n                    <motion.div \n                      className=\"relative h-48 w-full overflow-hidden\"\n                      style={{ transformStyle: 'preserve-3d' }}\n                    >\n                      <motion.img \n                        src={achievement.image}\n                        alt={achievement.title}\n                        className=\"w-full h-full object-cover\"\n                        style={{ transformStyle: 'preserve-3d' }}\n                      />\n                      <motion.div \n                        className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent\"\n                      />\n                      <motion.div \n                        className=\"absolute bottom-4 left-4\"\n                        style={{ transformStyle: 'preserve-3d' }}\n                      >\n                        <div className={`w-12 h-12 bg-gradient-to-r ${colorGradient} rounded-full flex items-center justify-center shadow-lg`}\n                          style={{\n                            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.1)'\n                          }}\n                        >\n                          <IconComponent className=\"text-white h-6 w-6\" />\n                        </div>\n                      </motion.div>\n                    </motion.div>\n                  )}\n                  \n                  <CardHeader \n                    className=\"text-center pb-4\"\n                    style={{ transform: 'translateZ(30px)' }}\n                  >\n                    {!achievement.image && (\n                      <motion.div \n                        className=\"flex justify-center mb-4\"\n                        style={{ transformStyle: 'preserve-3d' }}\n                      >\n                        <div className={`w-16 h-16 bg-gradient-to-r ${colorGradient} rounded-full flex items-center justify-center shadow-lg`}\n                          style={{\n                            boxShadow: '0 15px 35px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(255, 255, 255, 0.1)'\n                          }}\n                        >\n                          <IconComponent className=\"text-white h-8 w-8\" />\n                        </div>\n                      </motion.div>\n                    )}\n                    \n                    <Badge variant=\"secondary\" className=\"self-center mb-2 text-xs\">\n                      {achievement.date}\n                    </Badge>\n                    \n                    <CardTitle className=\"text-lg font-bold leading-tight\">\n                      {achievement.title}\n                    </CardTitle>\n                    \n                    <CardDescription className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                      {achievement.issuer}\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent style={{ transform: 'translateZ(20px)' }}>\n                    <motion.p \n                      className=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed\"\n                      whileHover={{ \n                        color: 'rgb(59, 130, 246)',\n                        transition: { duration: 0.3 }\n                      }}\n                    >\n                      {achievement.description}\n                    </motion.p>\n                  </CardContent>\n                  </Card>\n                </motion.div>\n              </motion.div>\n            );\n          })}\n        </div>\n        \n        {/* Enhanced 3D Achievement Stats */}\n        <motion.div\n          initial={{ opacity: 0, y: 50, rotateX: 45 }}\n          whileInView={{ opacity: 1, y: 0, rotateX: 0 }}\n          transition={{ duration: 0.8, delay: 0.5, type: \"spring\" }}\n          viewport={{ once: true }}\n          className=\"mt-20 text-center\"\n          style={{ \n            transform: 'translateZ(80px)',\n            transformStyle: 'preserve-3d'\n          }}\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {[\n              { value: \"5+\", label: \"Awards Won\", color: \"blue\" },\n              { value: \"1\", label: \"Research Publication\", color: \"green\" },\n              { value: \"90%\", label: \"NPTEL Score\", color: \"yellow\" },\n              { value: \"500+\", label: \"Competitors Beaten\", color: \"purple\" }\n            ].map((stat, index) => (\n              <motion.div \n                key={stat.label}\n                className=\"text-center\"\n                initial={{ opacity: 0, y: 30, rotateY: -20 }}\n                whileInView={{ opacity: 1, y: 0, rotateY: 0 }}\n                transition={{ duration: 0.6, delay: 0.7 + index * 0.1 }}\n                whileHover={{ \n                  scale: 1.1,\n                  rotateY: 10,\n                  y: -10,\n                  z: 30\n                }}\n                style={{ transformStyle: 'preserve-3d' }}\n              >\n                <motion.div \n                  className={`text-3xl font-bold text-${stat.color}-600 dark:text-${stat.color}-400 mb-2`}\n                  whileHover={{ \n                    scale: 1.2,\n                    rotateZ: 5\n                  }}\n                  style={{ transform: 'translateZ(20px)' }}\n                >\n                  {stat.value}\n                </motion.div>\n                <div \n                  className=\"text-sm text-gray-600 dark:text-gray-400\"\n                  style={{ transform: 'translateZ(10px)' }}\n                >\n                  {stat.label}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n      </motion.div>\n    </section>\n  );\n}","size_bytes":15015},"client/src/components/AnimatedContainer.tsx":{"content":"import React, { useRef } from 'react';\nimport { motion, useScroll, useTransform, useSpring } from 'framer-motion';\n\ninterface AnimatedContainerProps {\n  children: React.ReactNode;\n  className?: string;\n  delay?: number;\n  style?: React.CSSProperties;\n}\n\nexport default function AnimatedContainer({ \n  children, \n  className = \"\", \n  delay = 0,\n  style\n}: AnimatedContainerProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Track scroll progress for this specific container\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start 0.9\", \"start 0.1\"] // Trigger when container enters bottom 10% of viewport\n  });\n\n  // Bidirectional animations\n  // Fade and slide from top when scrolling down\n  // Fade and slide to top when scrolling up\n  const y = useSpring(\n    useTransform(scrollYProgress, [0, 1], [70, -70]),\n    { stiffness: 100, damping: 20, mass: 1.5 }\n  );\n  \n  const opacity = useSpring(\n    useTransform(scrollYProgress, [0, 0.25, 0.75, 1], [0, 1, 1, 0]),\n    { stiffness: 100, damping: 20, mass: 1.5 }\n  );\n\n  const scale = useSpring(\n    useTransform(scrollYProgress, [0, 0.25, 0.75, 1], [0.9, 1, 1, 0.9]),\n    { stiffness: 100, damping: 20, mass: 1.5 }\n  );\n\n  return (\n    <motion.div\n      ref={containerRef}\n      style={{\n        y,\n        opacity,\n        scale,\n        ...style\n      }}\n      initial={{ opacity: 0, y: 60 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ \n        duration: 0.8, \n        delay,\n        ease: [0.25, 0.46, 0.45, 0.94],\n        type: \"spring\",\n        stiffness: 100,\n        damping: 20\n      }}\n      whileHover={{ \n        scale: 1.02,\n        y: -8,\n        transition: { \n          duration: 0.6,\n          ease: \"easeOut\",\n          type: \"spring\",\n          stiffness: 150,\n          damping: 15\n        }\n      }}\n      className={`transform-gpu will-change-transform ${className}`}\n      data-testid=\"animated-container\"\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":1990},"client/src/components/ContactSection.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { useEnhancedScrollAnimation, useContainerHoverEffect } from '@/hooks/useBidirectionalScroll';\nimport { Mail, Phone, MapPin, Send, MessageSquare } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport portfolioData from '@/data/portfolio-data';\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: '',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerHover = useContainerHoverEffect();\n\n  const { personal } = portfolioData;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      await apiRequest('POST', '/api/contact', formData);\n      \n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for reaching out. I'll get back to you soon!\",\n      });\n      \n      setFormData({ name: '', email: '', subject: '', message: '' });\n    } catch (error) {\n      console.error('Contact form error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section \n      id=\"contact\" \n      ref={containerRef}\n      className=\"py-20 px-6\"\n    >\n      <div className=\"max-w-6xl mx-auto\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Get In Touch\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">Let's discuss your next project</p>\n        </motion.div>\n        \n        <div className=\"grid md:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <motion.div\n            {...containerHover}\n            initial={{ opacity: 0, x: -50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ \n              duration: 1.0, \n              delay: 0.3,\n              type: \"spring\",\n              stiffness: 80,\n              damping: 20,\n              mass: 1.2\n            }}\n            viewport={{ once: false }}\n            className=\"space-y-8\"\n            data-testid=\"contact-info-section\"\n          >\n            <div>\n              <h3 className=\"text-2xl font-bold mb-6\">Let's work together</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6 leading-relaxed\">\n                I'm always interested in new opportunities and exciting projects. \n                Whether you have a question or just want to say hi, I'll try my best to get back to you!\n              </p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <motion.div \n                className=\"flex items-center\"\n                whileHover={{ x: 5 }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mr-4\">\n                  <Mail className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Email</p>\n                  <p className=\"text-gray-600 dark:text-gray-400\">{personal.email}</p>\n                </div>\n              </motion.div>\n              \n              <motion.div \n                className=\"flex items-center\"\n                whileHover={{ x: 5 }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mr-4\">\n                  <Phone className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Phone</p>\n                  <p className=\"text-gray-600 dark:text-gray-400\">{personal.phone}</p>\n                </div>\n              </motion.div>\n              \n              <motion.div \n                className=\"flex items-center\"\n                whileHover={{ x: 5 }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mr-4\">\n                  <MapPin className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">Location</p>\n                  <p className=\"text-gray-600 dark:text-gray-400\">{personal.location}</p>\n                </div>\n              </motion.div>\n            </div>\n          </motion.div>\n          \n          {/* Contact Form */}\n          <motion.div\n            {...containerHover}\n            initial={{ opacity: 0, x: 50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ \n              duration: 1.2, \n              delay: 0.5,\n              type: \"spring\",\n              stiffness: 80,\n              damping: 20,\n              mass: 1.2\n            }}\n            viewport={{ once: false }}\n            data-testid=\"contact-form-section\"\n          >\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageSquare className=\"mr-2 h-5 w-5\" />\n                  Send Message\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Name *</Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        placeholder=\"Your name\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email *</Label>\n                      <Input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        placeholder=\"Your email\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      name=\"subject\"\n                      value={formData.subject}\n                      onChange={handleInputChange}\n                      placeholder=\"Message subject\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Message *</Label>\n                    <Textarea\n                      id=\"message\"\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleInputChange}\n                      placeholder=\"Your message\"\n                      rows={5}\n                      required\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    disabled={isSubmitting}\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                  >\n                    {isSubmitting ? (\n                      \"Sending...\"\n                    ) : (\n                      <>\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9421},"client/src/components/ExperienceSection.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { motion, useScroll, useTransform, useSpring } from 'framer-motion';\nimport { MapPin, Calendar } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport portfolioData from '@/data/portfolio-data';\nimport { useEnhancedScrollAnimation, useContainerHoverEffect } from '@/hooks/useBidirectionalScroll';\n\nexport default function ExperienceSection() {\n  const { experiences } = portfolioData;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [scrollDirection, setScrollDirection] = useState<'up' | 'down'>('down');\n  const [lastScrollY, setLastScrollY] = useState(0);\n  const containerHover = useContainerHoverEffect();\n  \n  // Track scroll direction\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      if (currentScrollY > lastScrollY) {\n        setScrollDirection('down');\n      } else {\n        setScrollDirection('up');\n      }\n      setLastScrollY(currentScrollY);\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [lastScrollY]);\n  \n  // Enhanced 3D Scroll effects\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start end\", \"end start\"]\n  });\n  \n  // Smooth spring animations for unique background effects\n  const y = useSpring(useTransform(scrollYProgress, [0, 1], [200, -200]));\n  const rotateX = useSpring(useTransform(scrollYProgress, [0, 0.5, 1], [30, 0, -30]));\n  const rotateY = useSpring(useTransform(scrollYProgress, [0, 1], [-20, 20]));\n  const opacity = useSpring(useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.1, 1, 1, 0.1]));\n\n  return (\n    <section \n      id=\"experience\" \n      ref={containerRef}\n      className=\"py-20 px-6 bg-gradient-to-br from-gray-50 via-indigo-50 to-cyan-100 dark:from-slate-900 dark:via-indigo-900 dark:to-cyan-900 relative overflow-hidden\"\n      style={{ perspective: '1500px' }}\n    >\n      {/* Unique Geometric Background Effects */}\n      <motion.div \n        className=\"absolute inset-0 overflow-hidden\"\n        style={{\n          rotateX,\n          rotateY: rotateY.get() * 0.3,\n          y: y.get() * 0.1,\n          opacity\n        }}\n      >\n        {/* Floating Geometric Shapes */}\n        <motion.div \n          className=\"absolute top-10 left-10 w-32 h-32 bg-gradient-to-r from-cyan-400/20 to-blue-600/20\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [100, -300]),\n            x: useTransform(scrollYProgress, [0, 1], [-20, 80]),\n            rotate: useTransform(scrollYProgress, [0, 1], [0, 180]),\n            clipPath: 'polygon(50% 0%, 0% 100%, 100% 100%)'\n          }}\n        />\n        \n        <motion.div \n          className=\"absolute top-1/4 right-16 w-24 h-24 bg-gradient-to-r from-purple-400/25 to-pink-600/25 rounded-full blur-xl\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [-50, 250]),\n            x: useTransform(scrollYProgress, [0, 1], [30, -100]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [0.5, 1.5, 0.3])\n          }}\n        />\n        \n        <motion.div \n          className=\"absolute bottom-1/4 left-1/4 w-40 h-40 bg-gradient-to-r from-emerald-400/15 to-teal-600/15\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [80, -200]),\n            x: useTransform(scrollYProgress, [0, 1], [-40, 120]),\n            rotate: useTransform(scrollYProgress, [0, 1], [45, 225]),\n            clipPath: 'polygon(25% 0%, 100% 0%, 75% 100%, 0% 100%)'\n          }}\n        />\n        \n        <motion.div \n          className=\"absolute top-3/4 right-1/3 w-28 h-28 bg-gradient-to-r from-yellow-400/20 to-orange-600/20 rounded-lg blur-sm\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [-100, 150]),\n            x: useTransform(scrollYProgress, [0, 1], [50, -150]),\n            rotate: useTransform(scrollYProgress, [0, 1], [0, -90]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [1, 0.2, 1.8])\n          }}\n        />\n        \n        {/* Animated Grid Lines */}\n        <motion.div \n          className=\"absolute inset-0 opacity-10\"\n          style={{\n            backgroundImage: `\n              linear-gradient(rgba(59, 130, 246, 0.3) 1px, transparent 1px),\n              linear-gradient(90deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px)\n            `,\n            backgroundSize: '50px 50px',\n            y: useTransform(scrollYProgress, [0, 1], [0, 100]),\n            x: useTransform(scrollYProgress, [0, 1], [0, -50])\n          }}\n        />\n      </motion.div>\n      \n      <motion.div \n        className=\"max-w-6xl mx-auto relative z-10\"\n        style={{ transformStyle: 'preserve-3d' }}\n      >\n        <motion.div\n          initial={{ opacity: 0, y: 40, rotateX: 45 }}\n          whileInView={{ opacity: 1, y: 0, rotateX: 0 }}\n          transition={{ duration: 0.8, type: \"spring\", stiffness: 100 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n          style={{\n            transform: 'translateZ(80px)',\n            transformStyle: 'preserve-3d'\n          }}\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Work Experience\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">My professional journey</p>\n        </motion.div>\n        \n        {/* Interactive Timeline with Bidirectional Animations */}\n        <div className=\"relative\" style={{ transformStyle: 'preserve-3d' }}>\n          {/* Enhanced Timeline Line */}\n          <motion.div \n            className=\"absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-cyan-600 via-blue-600 to-purple-600 h-full rounded-full shadow-lg\"\n            style={{\n              boxShadow: '0 0 20px rgba(59, 130, 246, 0.5)',\n              transform: 'translateZ(20px)'\n            }}\n          />\n          \n          {experiences.map((exp, index) => {\n            const isLeft = index % 2 === 0;\n            const experienceAnimation = useEnhancedScrollAnimation(containerRef, index, experiences.length);\n            \n            return (\n              <motion.div\n                key={exp.id}\n                style={{\n                  y: experienceAnimation.y,\n                  opacity: experienceAnimation.opacity,\n                  scale: experienceAnimation.scale\n                }}\n                initial={{ \n                  opacity: 0, \n                  y: scrollDirection === 'down' ? 120 : -120,\n                  x: isLeft ? -150 : 150,\n                  rotateY: isLeft ? -45 : 45,\n                  rotateX: 30,\n                  scale: 0.6,\n                  rotateZ: isLeft ? -10 : 10\n                }}\n                whileInView={{ \n                  opacity: 1, \n                  y: 0,\n                  x: 0,\n                  rotateY: 0,\n                  rotateX: 0,\n                  scale: 1,\n                  rotateZ: 0\n                }}\n                transition={{ \n                  duration: 1.8, \n                  delay: index * 0.3,\n                  type: \"spring\",\n                  stiffness: 40,\n                  damping: 20,\n                  mass: 1.5\n                }}\n                viewport={{ \n                  once: false,\n                  margin: \"-150px\"\n                }}\n                whileHover={{ \n                  scale: 1.05,\n                  y: -10,\n                  rotateY: isLeft ? 5 : -5,\n                  z: 50,\n                  transition: { \n                    duration: 0.6,\n                    ease: \"easeOut\",\n                    type: \"spring\",\n                    stiffness: 150,\n                    damping: 20\n                  }\n                }}\n                className=\"relative flex items-center mb-12\"\n                data-id={exp.id}\n              >\n              {/* Enhanced Timeline Dot */}\n              <motion.div \n                className={`absolute left-1/2 transform -translate-x-1/2 w-6 h-6 ${exp.current ? 'bg-cyan-500' : 'bg-purple-600'} rounded-full border-4 border-white dark:border-slate-800 shadow-xl z-10`}\n                whileHover={{ \n                  scale: 1.15,\n                  boxShadow: exp.current ? '0 0 20px rgba(6, 182, 212, 0.6)' : '0 0 20px rgba(147, 51, 234, 0.6)'\n                }}\n                transition={{ duration: 0.3 }}\n                style={{\n                  transform: 'translateZ(40px)',\n                  boxShadow: exp.current ? '0 0 15px rgba(6, 182, 212, 0.5)' : '0 0 15px rgba(147, 51, 234, 0.5)'\n                }}\n              />\n              \n              {/* Enhanced Experience Card with Subtle Hover Effects */}\n              <motion.div \n                className={`w-5/12 ${index % 2 === 0 ? 'mr-auto' : 'ml-auto'} bg-white/90 dark:bg-slate-700/90 backdrop-blur-sm border border-white/30 dark:border-slate-600/40 rounded-xl p-6 transition-all duration-500 cursor-pointer group`}\n                whileHover={{ \n                  scale: 1.08,\n                  y: -15,\n                  rotateY: index % 2 === 0 ? 8 : -8,\n                  rotateX: -5,\n                  z: 80,\n                  boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.35)'\n                }}\n                transition={{ \n                  duration: 0.6, \n                  ease: \"easeOut\",\n                  type: \"spring\",\n                  stiffness: 150,\n                  damping: 20\n                }}\n                style={{\n                  transformStyle: 'preserve-3d',\n                  boxShadow: '0 10px 25px -12px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.1)',\n                  background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.8) 100%)',\n                  transform: `translateZ(30px)`\n                }}\n              >\n                <div className=\"flex items-center justify-between mb-2\" style={{ transform: 'translateZ(20px)' }}>\n                  <div className=\"text-sm text-cyan-600 dark:text-cyan-400 font-semibold flex items-center group-hover:scale-105 transition-transform duration-300\">\n                    <Calendar className=\"mr-1 h-4 w-4\" />\n                    {exp.duration}\n                  </div>\n                  {exp.current && (\n                    <div className=\"group-hover:scale-105 transition-transform duration-300\" style={{ transform: 'translateZ(10px)' }}>\n                      <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 shadow-lg\">\n                        Current\n                      </Badge>\n                    </div>\n                  )}\n                </div>\n                \n                <h3 \n                  className=\"text-xl font-bold mb-2 group-hover:text-cyan-600 dark:group-hover:text-cyan-400 transition-colors duration-300\"\n                  style={{ transform: 'translateZ(15px)' }}\n                >\n                  {exp.title}\n                </h3>\n                \n                <div \n                  className=\"flex items-center text-purple-600 dark:text-purple-400 font-medium mb-1 group-hover:scale-105 transition-transform duration-300\"\n                  style={{ transform: 'translateZ(10px)' }}\n                >\n                  <span>{exp.company}</span>\n                </div>\n                \n                <div \n                  className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm mb-3 group-hover:scale-105 transition-transform duration-300\"\n                  style={{ transform: 'translateZ(8px)' }}\n                >\n                  <MapPin className=\"mr-1 h-4 w-4\" />\n                  {exp.location} • {exp.type}\n                </div>\n                \n                <p \n                  className=\"text-gray-600 dark:text-gray-300 mb-4 leading-relaxed group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\"\n                  style={{ transform: 'translateZ(5px)' }}\n                >\n                  {exp.description}\n                </p>\n                \n                <div \n                  className=\"flex flex-wrap gap-2\"\n                  style={{ transform: 'translateZ(12px)' }}\n                >\n                  {exp.skills.map((skill, skillIndex) => (\n                    <div\n                      key={skill}\n                      className=\"group-hover:scale-105 transition-transform duration-300\"\n                      style={{ transformStyle: 'preserve-3d' }}\n                    >\n                      <Badge variant=\"outline\" className=\"text-xs shadow-sm group-hover:shadow-md group-hover:border-blue-300 transition-all duration-300\">\n                        {skill}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </motion.div>\n            </motion.div>\n            );\n          })}\n        </div>\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":13087},"client/src/components/Footer.tsx":{"content":"import React from 'react';\nimport { Github, Linkedin, Twitter, Heart } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport portfolioData from '@/data/portfolio-data';\n\nconst quickLinks = [\n  { name: 'Home', href: '#home' },\n  { name: 'Experience', href: '#experience' },\n  { name: 'Skills', href: '#skills' },\n  { name: 'Projects', href: '#projects' },\n  { name: 'Contact', href: '#contact' },\n];\n\nconst socialLinks = [\n  { icon: Github, href: portfolioData.personal.github, label: 'GitHub' },\n  { icon: Linkedin, href: portfolioData.personal.linkedin, label: 'LinkedIn' },\n  { icon: Twitter, href: portfolioData.personal.twitter || 'https://x.com/RAVIKaringu1', label: 'Twitter' },\n];\n\nexport default function Footer() {\n  const smoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {\n    e.preventDefault();\n    const target = document.querySelector(href);\n    if (target) {\n      target.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <footer className=\"bg-gray-900 text-white py-12 px-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Brand & Description */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-4\">{portfolioData.personal.name}</h3>\n            <p className=\"text-gray-400 leading-relaxed mb-6\">\n              {portfolioData.personal.subtitle} passionate about creating innovative solutions \n              that make a difference in the world.\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Based in {portfolioData.personal.location}\n            </p>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-medium mb-4\">Quick Links</h4>\n            <div className=\"space-y-2\">\n              {quickLinks.map((link) => (\n                <a\n                  key={link.name}\n                  href={link.href}\n                  onClick={(e) => smoothScroll(e, link.href)}\n                  className=\"block text-gray-400 hover:text-white transition-colors\"\n                >\n                  {link.name}\n                </a>\n              ))}\n            </div>\n          </div>\n          \n          {/* Connect */}\n          <div>\n            <h4 className=\"text-lg font-medium mb-4\">Connect</h4>\n            <div className=\"flex space-x-4 mb-6\">\n              {socialLinks.map((social) => {\n                const IconComponent = social.icon;\n                return (\n                  <Button\n                    key={social.label}\n                    asChild\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-gray-400 hover:text-white hover:bg-gray-800\"\n                  >\n                    <a \n                      href={social.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={social.label}\n                    >\n                      <IconComponent className=\"h-5 w-5\" />\n                    </a>\n                  </Button>\n                );\n              })}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Button\n                asChild\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                <a \n                  href={portfolioData.personal.resumeLink}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Download Resume\n                </a>\n              </Button>\n              \n              <Button\n                asChild\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                <a href={`mailto:${portfolioData.personal.email}`}>\n                  Send Email\n                </a>\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-400 flex items-center justify-center\">\n            © 2024 {portfolioData.personal.name}. All rights reserved. \n            Made with <Heart className=\"h-4 w-4 mx-1 text-red-500\" /> using React & Tailwind CSS.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4480},"client/src/components/GitHubActivity.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Github, GitCommit, Star, GitFork, Users } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useGitHubActivity, useGitHubStats } from '@/hooks/useGitHub';\n\nconst eventTypeMap: Record<string, { icon: React.ElementType; color: string; label: string }> = {\n  PushEvent: { icon: GitCommit, color: 'text-blue-500', label: 'Pushed' },\n  CreateEvent: { icon: Star, color: 'text-green-500', label: 'Created' },\n  ForkEvent: { icon: GitFork, color: 'text-purple-500', label: 'Forked' },\n  IssuesEvent: { icon: GitCommit, color: 'text-orange-500', label: 'Issue' },\n  PullRequestEvent: { icon: GitCommit, color: 'text-red-500', label: 'Pull Request' },\n};\n\nfunction ActivityItem({ event }: { event: any }) {\n  const eventInfo = eventTypeMap[event.type] || eventTypeMap.PushEvent;\n  const IconComponent = eventInfo.icon;\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    if (diffInHours < 48) return '1 day ago';\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  };\n\n  return (\n    <div className=\"border-l-4 border-blue-500 pl-4 py-3 hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors\">\n      <div className=\"flex items-center mb-1\">\n        <IconComponent className={`h-4 w-4 mr-2 ${eventInfo.color}`} />\n        <span className=\"font-medium text-sm\">{eventInfo.label}</span>\n      </div>\n      <p className=\"font-medium text-sm\">{event.repo.name}</p>\n      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{formatDate(event.created_at)}</p>\n    </div>\n  );\n}\n\nfunction StatCard({ icon: Icon, value, label, color }: { \n  icon: React.ElementType; \n  value: string | number; \n  label: string; \n  color: string; \n}) {\n  return (\n    <div className=\"text-center p-4 bg-gray-50 dark:bg-slate-700 rounded-lg\">\n      <Icon className={`h-6 w-6 mx-auto mb-2 ${color}`} />\n      <div className={`text-2xl font-bold ${color}`}>{value}</div>\n      <div className=\"text-sm text-gray-600 dark:text-gray-400\">{label}</div>\n    </div>\n  );\n}\n\nexport default function GitHubActivity() {\n  const { data: activities, isLoading: activitiesLoading, error: activitiesError } = useGitHubActivity();\n  const { data: stats, isLoading: statsLoading, error: statsError } = useGitHubStats();\n\n  return (\n    <section className=\"py-20 px-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            GitHub Activity\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">Recent contributions and activity</p>\n        </motion.div>\n        \n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Recent Activity */}\n              <div>\n                <CardHeader className=\"px-0 pt-0\">\n                  <CardTitle className=\"flex items-center text-xl\">\n                    <Github className=\"mr-3 h-6 w-6\" />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                \n                <div className=\"space-y-4\">\n                  {activitiesLoading ? (\n                    Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-full\" />\n                        <Skeleton className=\"h-3 w-2/3\" />\n                      </div>\n                    ))\n                  ) : activitiesError ? (\n                    <div className=\"text-center text-gray-500 dark:text-gray-400 py-8\">\n                      <Github className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>Unable to load GitHub activity</p>\n                      <p className=\"text-sm\">Please check back later</p>\n                    </div>\n                  ) : activities && activities.length > 0 ? (\n                    activities.map((event) => (\n                      <ActivityItem key={event.id} event={event} />\n                    ))\n                  ) : (\n                    <div className=\"text-center text-gray-500 dark:text-gray-400 py-8\">\n                      <Github className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No recent activity found</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* GitHub Stats */}\n              <div>\n                <CardHeader className=\"px-0 pt-0\">\n                  <CardTitle className=\"text-xl\">Statistics</CardTitle>\n                </CardHeader>\n                \n                {statsLoading ? (\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {Array.from({ length: 4 }).map((_, i) => (\n                      <div key={i} className=\"text-center p-4 bg-gray-50 dark:bg-slate-700 rounded-lg\">\n                        <Skeleton className=\"h-6 w-6 mx-auto mb-2\" />\n                        <Skeleton className=\"h-6 w-12 mx-auto mb-1\" />\n                        <Skeleton className=\"h-4 w-16 mx-auto\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : statsError ? (\n                  <div className=\"text-center text-gray-500 dark:text-gray-400 py-8\">\n                    <p>Unable to load GitHub stats</p>\n                  </div>\n                ) : stats ? (\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <StatCard\n                      icon={Github}\n                      value={stats.repositories}\n                      label=\"Repositories\"\n                      color=\"text-blue-600\"\n                    />\n                    <StatCard\n                      icon={Star}\n                      value={stats.totalStars}\n                      label=\"Stars\"\n                      color=\"text-yellow-600\"\n                    />\n                    <StatCard\n                      icon={GitFork}\n                      value={stats.totalForks}\n                      label=\"Forks\"\n                      color=\"text-purple-600\"\n                    />\n                    <StatCard\n                      icon={Users}\n                      value={stats.followers}\n                      label=\"Followers\"\n                      color=\"text-green-600\"\n                    />\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7204},"client/src/components/HeroSection.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Github, Linkedin, Download, ChevronDown, Twitter } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport portfolioData from '@/data/portfolio-data';\n\nexport default function HeroSection() {\n  const { personal } = portfolioData;\n\n  return (\n    <section id=\"home\" className=\"min-h-screen flex items-center justify-center px-6 pt-24 relative overflow-hidden\">\n      {/* Enhanced Background Animation Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <motion.div\n          animate={{ \n            scale: [1, 1.2, 1], \n            rotate: [0, 360],\n          }}\n          transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n          className=\"absolute -top-40 -right-32 w-96 h-96 bg-gradient-to-r from-blue-400 via-purple-500 to-indigo-600 rounded-full mix-blend-multiply filter blur-3xl opacity-30\"\n        />\n        <motion.div\n          animate={{ \n            scale: [1.2, 1, 1.2], \n            rotate: [360, 0],\n          }}\n          transition={{ duration: 25, repeat: Infinity, ease: \"linear\" }}\n          className=\"absolute -bottom-40 -left-32 w-96 h-96 bg-gradient-to-r from-purple-400 via-pink-500 to-rose-600 rounded-full mix-blend-multiply filter blur-3xl opacity-30\"\n        />\n        <motion.div\n          animate={{ \n            scale: [1, 1.3, 1], \n            rotate: [0, -360],\n          }}\n          transition={{ duration: 30, repeat: Infinity, ease: \"linear\" }}\n          className=\"absolute top-1/2 right-1/4 w-64 h-64 bg-gradient-to-r from-cyan-400 via-teal-500 to-emerald-600 rounded-full mix-blend-multiply filter blur-2xl opacity-25\"\n        />\n        \n        {/* Additional subtle geometric patterns */}\n        <div className=\"absolute top-20 left-20 w-32 h-32 border border-blue-200/20 dark:border-blue-800/20 rounded-full\"></div>\n        <div className=\"absolute bottom-20 right-20 w-48 h-48 border border-purple-200/20 dark:border-purple-800/20 rounded-full\"></div>\n        <div className=\"absolute top-1/3 left-1/4 w-24 h-24 border border-pink-200/20 dark:border-pink-800/20 rounded-full\"></div>\n      </div>\n      \n      <div className=\"max-w-6xl mx-auto text-center relative z-10\">\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          {/* Profile Image with 3D effect */}\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"relative inline-block mb-8\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full blur-xl opacity-30 transform scale-110\" />\n            <img \n              src={personal.profileImage}\n              alt={`${personal.name} Profile Photo`}\n              className=\"relative w-40 h-40 rounded-full border-4 border-white dark:border-slate-800 shadow-2xl object-cover transform hover:scale-105 transition-transform duration-300\"\n            />\n          </motion.div>\n          \n          <motion.h1\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n            className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent leading-tight\"\n          >\n            {personal.name}\n          </motion.h1>\n          \n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n            className=\"text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 font-medium\"\n          >\n            {personal.subtitle}\n          </motion.p>\n          \n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.8 }}\n            className=\"text-lg text-gray-600 dark:text-gray-400 mb-12 max-w-3xl mx-auto leading-relaxed\"\n          >\n            {personal.bio}\n          </motion.p>\n          \n          {/* Social Links */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 1.0 }}\n            className=\"flex justify-center space-x-6 mb-12\"\n          >\n            <Button\n              asChild\n              className=\"bg-gray-900 dark:bg-white text-white dark:text-gray-900 hover:scale-105 transition-transform\"\n            >\n              <a href={personal.github} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Github className=\"mr-2 h-4 w-4\" />\n                GitHub\n              </a>\n            </Button>\n            \n            <Button\n              asChild\n              className=\"bg-blue-600 hover:bg-blue-700 hover:scale-105 transition-transform\"\n            >\n              <a href={personal.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Linkedin className=\"mr-2 h-4 w-4\" />\n                LinkedIn\n              </a>\n            </Button>\n            \n            <Button\n              asChild\n              className=\"bg-blue-400 hover:bg-blue-500 hover:scale-105 transition-transform\"\n            >\n              <a href={personal.twitter || 'https://x.com/RAVIKaringu1'} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Twitter className=\"mr-2 h-4 w-4\" />\n                Twitter\n              </a>\n            </Button>\n            \n            <Button\n              asChild\n              className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 hover:scale-105 transition-transform\"\n            >\n              <a href={personal.resumeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Download className=\"mr-2 h-4 w-4\" />\n                Resume\n              </a>\n            </Button>\n          </motion.div>\n          \n          {/* Scroll Indicator */}\n          <motion.div\n            animate={{ y: [0, 10, 0] }}\n            transition={{ duration: 2, repeat: Infinity }}\n            className=\"text-gray-400\"\n          >\n            <ChevronDown className=\"h-8 w-8 mx-auto\" />\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6427},"client/src/components/Navbar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Search, Moon, Sun } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\nimport { useAISearch } from '@/hooks/useAISearch';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport portfolioData from '@/data/portfolio-data';\n\nconst navItems = [\n  { name: 'Home', href: '#home' },\n  { name: 'Experience', href: '#experience' },\n  { name: 'Skills', href: '#skills' },\n  { name: 'Projects', href: '#projects' },\n  { name: 'Achievements', href: '#achievements' },\n  { name: 'Contact', href: '#contact' },\n];\n\nexport default function Navbar() {\n  const [isVisible, setIsVisible] = useState(true);\n  const [lastScrollY, setLastScrollY] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  \n  const { theme, toggleTheme } = useTheme();\n  const { search, isSearching, searchResults } = useAISearch();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      \n      if (currentScrollY > lastScrollY && currentScrollY > 100) {\n        setIsVisible(false);\n      } else {\n        setIsVisible(true);\n      }\n      \n      setLastScrollY(currentScrollY);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [lastScrollY]);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!searchQuery.trim()) {\n      setShowSearchResults(false);\n      return;\n    }\n\n    // Check if search query matches a section name directly\n    const sectionMap: Record<string, string> = {\n      'home': '#home',\n      'experience': '#experience',\n      'skills': '#skills',\n      'projects': '#projects',\n      'achievements': '#achievements',\n      'contact': '#contact'\n    };\n\n    const queryLower = searchQuery.toLowerCase().trim();\n    \n    // Direct section navigation\n    if (sectionMap[queryLower]) {\n      const target = document.querySelector(sectionMap[queryLower]);\n      if (target) {\n        target.scrollIntoView({ behavior: 'smooth' });\n        setSearchQuery('');\n        setShowSearchResults(false);\n        return;\n      }\n    }\n\n    // AI-powered search for content\n    const results = await search(searchQuery);\n    setShowSearchResults(true);\n    \n    // Scroll to first result if available\n    if (results.length > 0) {\n      const firstResultId = results[0];\n      const element = document.getElementById(firstResultId) || \n                     document.querySelector(`[data-id=\"${firstResultId}\"]`);\n      \n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        element.classList.add('highlight-search-result');\n        setTimeout(() => {\n          element.classList.remove('highlight-search-result');\n        }, 3000);\n      }\n    }\n  };\n\n  const smoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {\n    e.preventDefault();\n    const target = document.querySelector(href);\n    if (target) {\n      target.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const getItemSection = (itemId: string): string | null => {\n    if (itemId.startsWith('exp-')) return 'Experience';\n    if (itemId.startsWith('proj-')) return 'Projects';\n    if (itemId.startsWith('ach-')) return 'Achievements';\n    if (itemId.startsWith('cert-')) return 'Achievements';\n    if (itemId.startsWith('edu-')) return 'Experience';\n    return null;\n  };\n\n  const getItemTitle = (itemId: string): string => {\n    // Find the item in portfolio data\n    const allItems = [\n      ...portfolioData.experiences.map(exp => ({ id: exp.id, title: exp.title })),\n      ...portfolioData.projects.map(proj => ({ id: proj.id, title: proj.title })),\n      ...portfolioData.achievements.map(ach => ({ id: ach.id, title: ach.title })),\n      ...portfolioData.certifications.map(cert => ({ id: cert.id, title: cert.title })),\n      ...portfolioData.education.map(edu => ({ id: edu.id, title: edu.degree }))\n    ];\n    \n    const item = allItems.find(item => item.id === itemId);\n    return item ? item.title : itemId;\n  };\n\n  return (\n    <motion.nav\n      initial={{ y: -100 }}\n      animate={{ y: isVisible ? 0 : -100 }}\n      transition={{ duration: 0.3 }}\n      className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-white/80 dark:bg-slate-800/80 backdrop-blur-md rounded-full px-6 py-3 shadow-lg border border-gray-200 dark:border-gray-700\"\n    >\n      <div className=\"flex items-center justify-between w-full max-w-4xl mx-auto\">\n        {/* Left Side - Logo */}\n        <motion.a \n          href=\"#home\" \n          onClick={(e) => smoothScroll(e, '#home')}\n          className=\"flex items-center space-x-2\"\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n        >\n          <img \n            src={portfolioData.personal.logo || 'https://res.cloudinary.com/dumu7y8az/image/upload/v1689959301/ravikaringu_armwif.png'} \n            alt=\"Ravi Karingu Logo\" \n            className=\"w-8 h-8 rounded-full\"\n          />\n          <span className=\"font-bold text-lg bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            RK\n          </span>\n        </motion.a>\n        \n        {/* Center - AI Search Bar */}\n        <div className=\"relative flex-1 max-w-md mx-8\">\n          <form onSubmit={handleSearch} className=\"flex items-center\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search portfolio or type section name...\"\n              value={searchQuery}\n              onChange={(e) => {\n                setSearchQuery(e.target.value);\n                if (!e.target.value.trim()) {\n                  setShowSearchResults(false);\n                }\n              }}\n              className=\"w-full bg-gray-100 dark:bg-slate-700 border-0 focus:ring-2 focus:ring-blue-500 rounded-full pl-4 pr-10\"\n            />\n            <Button\n              type=\"submit\"\n              size=\"sm\"\n              variant=\"ghost\"\n              disabled={isSearching}\n              className=\"absolute right-1 p-2 hover:bg-transparent\"\n            >\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          </form>\n          \n          {/* Search Results Dropdown */}\n          <AnimatePresence>\n            {showSearchResults && searchQuery.trim() && (\n              <motion.div\n                initial={{ opacity: 0, y: -10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                className=\"absolute top-full mt-2 w-full bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-4 z-10\"\n              >\n                {searchResults.length > 0 ? (\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                      Found {searchResults.length} relevant item{searchResults.length !== 1 ? 's' : ''}\n                    </p>\n                    <div className=\"space-y-2 mb-3\">\n                      {searchResults.slice(0, 5).map((resultId) => {\n                        const section = getItemSection(resultId);\n                        return (\n                          <button\n                            key={resultId}\n                            onClick={() => {\n                              const element = document.getElementById(resultId);\n                              if (element) {\n                                element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                                setShowSearchResults(false);\n                              }\n                            }}\n                            className=\"w-full text-left p-2 rounded hover:bg-gray-100 dark:hover:bg-slate-700 text-sm\"\n                          >\n                            <span className=\"font-medium\">{getItemTitle(resultId)}</span>\n                            {section && <span className=\"text-gray-500 dark:text-gray-400 ml-2\">in {section}</span>}\n                          </button>\n                        );\n                      })}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowSearchResults(false)}\n                    >\n                      Close\n                    </Button>\n                  </div>\n                ) : (\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                      No results found for \"{searchQuery}\"\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-500 mb-3\">\n                      Try searching for: Projects, Skills, Experience, Achievements, or specific technologies\n                    </p>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowSearchResults(false)}\n                    >\n                      Close\n                    </Button>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n        \n        {/* Right Side - Navigation Links & Theme Toggle */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Navigation Links */}\n          {navItems.slice(0, 3).map((item) => (\n            <motion.a\n              key={item.name}\n              href={item.href}\n              onClick={(e) => smoothScroll(e, item.href)}\n              className=\"text-sm font-medium hover:text-blue-600 dark:hover:text-blue-400 transition-colors relative hidden lg:block\"\n              whileHover={{ y: -2 }}\n            >\n              {item.name}\n            </motion.a>\n          ))}\n          \n          {/* Theme Toggle */}\n          <Button\n            onClick={toggleTheme}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2 rounded-full\"\n          >\n            {theme === 'light' ? <Moon className=\"h-4 w-4\" /> : <Sun className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n    </motion.nav>\n  );\n}\n","size_bytes":10316},"client/src/components/ProjectsSection.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { motion, useScroll, useTransform, useSpring } from 'framer-motion';\nimport { ExternalLink, Github, Calendar } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport portfolioData from '@/data/portfolio-data';\nimport { useEnhancedScrollAnimation } from '@/hooks/useBidirectionalScroll';\n\nexport default function ProjectsSection() {\n  const { projects } = portfolioData;\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  \n  // Enhanced bidirectional scroll animations\n  const { scrollYProgress, scrollDirection } = useEnhancedScrollAnimation(containerRef, 0, projects.length);\n  \n  // Smooth spring animations for 3D effects with bidirectional behavior\n  const y = useSpring(useTransform(scrollYProgress, [0, 1], [100, -100]));\n  const rotateX = useSpring(useTransform(scrollYProgress, [0, 0.5, 1], [25, 0, -25]));\n  const rotateY = useSpring(useTransform(scrollYProgress, [0, 1], [-15, 15]));\n  const opacity = useSpring(useTransform(scrollYProgress, [0, 0.15, 0.85, 1], [0, 1, 1, 0]));\n  \n  // Mouse tracking for 3D tilt effect\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        const x = (e.clientX - centerX) / (rect.width / 2);\n        const y = (e.clientY - centerY) / (rect.height / 2);\n        setMousePosition({ x: x * 8, y: y * 8 });\n      }\n    };\n\n    const handleMouseLeave = () => {\n      setMousePosition({ x: 0, y: 0 });\n    };\n\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener('mousemove', handleMouseMove);\n      container.addEventListener('mouseleave', handleMouseLeave);\n      \n      return () => {\n        container.removeEventListener('mousemove', handleMouseMove);\n        container.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, []);\n\n  return (\n    <section \n      id=\"projects\" \n      ref={containerRef}\n      className=\"py-20 px-6 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 dark:from-indigo-900 dark:via-slate-800 dark:to-purple-900 relative overflow-hidden\"\n      style={{ perspective: '1200px' }}\n    >\n      {/* Enhanced 3D Background decoration */}\n      <motion.div \n        className=\"absolute inset-0 overflow-hidden\"\n        style={{\n          rotateX,\n          rotateY: rotateY.get() * 0.5,\n          y: y.get() * 0.2,\n          opacity\n        }}\n      >\n        <motion.div \n          className=\"absolute top-16 left-16 w-80 h-80 bg-gradient-to-r from-blue-400/15 to-indigo-600/15 rounded-full blur-3xl\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [80, -150]),\n            x: useTransform(scrollYProgress, [0, 1], [-50, 120]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [0.6, 1.4, 0.8])\n          }}\n        />\n        <motion.div \n          className=\"absolute bottom-16 right-16 w-80 h-80 bg-gradient-to-r from-purple-400/15 to-pink-600/15 rounded-full blur-3xl\"\n          style={{\n            y: useTransform(scrollYProgress, [0, 1], [-80, 150]),\n            x: useTransform(scrollYProgress, [0, 1], [50, -120]),\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [1.2, 0.7, 1.5])\n          }}\n        />\n        <motion.div \n          className=\"absolute top-1/3 right-1/3 w-48 h-48 bg-gradient-to-r from-cyan-400/20 to-teal-600/20 rounded-full blur-2xl\"\n          style={{\n            scale: useTransform(scrollYProgress, [0, 0.5, 1], [0.8, 1.6, 0.9]),\n            rotate: useTransform(scrollYProgress, [0, 1], [0, 180])\n          }}\n        />\n      </motion.div>\n      \n      <motion.div \n        className=\"max-w-6xl mx-auto relative z-10\"\n        style={{\n          rotateX: mousePosition.y * 0.08,\n          rotateY: mousePosition.x * 0.08,\n          transformStyle: 'preserve-3d'\n        }}\n      >\n        <motion.div\n          initial={{ opacity: 0, y: 30, rotateX: 30 }}\n          whileInView={{ opacity: 1, y: 0, rotateX: 0 }}\n          transition={{ duration: 0.8, type: \"spring\", stiffness: 80 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n          style={{\n            transform: 'translateZ(60px)',\n            transformStyle: 'preserve-3d'\n          }}\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Featured Projects\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">Some of my recent work</p>\n        </motion.div>\n        \n        <div \n          className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-10\"\n          style={{ transformStyle: 'preserve-3d' }}\n        >\n          {projects.map((project, index) => {\n            // Enhanced bidirectional animation for each project\n            const projectAnimation = useEnhancedScrollAnimation(containerRef, index, projects.length);\n            const { angle, initialPosition, delay } = projectAnimation;\n            const depthOffset = Math.sin(angle) * 40;\n            \n            return (\n              <motion.div\n                key={project.id}\n                initial={{ \n                  opacity: 0, \n                  x: initialPosition.x,\n                  y: initialPosition.y + 100,\n                  rotateY: Math.cos(angle) * 45,\n                  rotateX: 35,\n                  scale: 0.7\n                }}\n                animate={{\n                  opacity: projectAnimation.opacity.get(),\n                  y: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? \n                     initialPosition.y + 100 : 0,\n                  x: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? \n                     initialPosition.x : 0,\n                  rotateY: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? \n                          Math.cos(angle) * 45 : 0,\n                  rotateX: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? 35 : 0,\n                  scale: scrollDirection.direction === 'up' && scrollDirection.isScrolling ? 0.7 : 1\n                }}\n                whileInView={{ \n                  opacity: 1, \n                  x: 0,\n                  y: 0,\n                  rotateY: 0,\n                  rotateX: 0,\n                  scale: 1\n                }}\n                transition={{ \n                  duration: scrollDirection.direction === 'up' ? 1.2 : 1.8, \n                  delay: scrollDirection.direction === 'up' ? (projects.length - index - 1) * 0.2 : delay,\n                  type: \"spring\",\n                  stiffness: 40,\n                  damping: 20,\n                  mass: 1.5,\n                  ease: [0.25, 0.46, 0.45, 0.94]\n                }}\n                viewport={{ once: false, amount: 0.3 }}\n\n                style={{\n                  transformStyle: 'preserve-3d',\n                  transform: `translateZ(${depthOffset}px)`,\n                }}\n                data-testid={`project-card-${project.id}`}\n              >\n              <motion.div\n                className=\"h-full\"\n              >\n                <Card className=\"h-full overflow-hidden hover:shadow-2xl transition-all duration-500 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-white/30 dark:border-slate-700/30 hover:bg-white/95 dark:hover:bg-slate-800/95 hover:border-blue-200/50 dark:hover:border-blue-400/30\"\n                  style={{\n                    transformStyle: 'preserve-3d',\n                    boxShadow: '0 30px 60px -12px rgba(0, 0, 0, 0.25), 0 18px 36px -18px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.05)',\n                  }}\n                  data-testid={`project-card-content-${project.id}`}\n                >\n                <motion.div \n                  className=\"relative overflow-hidden\"\n                  style={{ transformStyle: 'preserve-3d' }}\n                >\n                  <motion.img \n                    src={project.image}\n                    alt={`${project.title} preview`}\n                    className=\"w-full h-48 object-cover\"\n                    style={{ transformStyle: 'preserve-3d' }}\n                  />\n                  <motion.div \n                    className=\"absolute top-4 right-4\"\n                    whileHover={{ \n                      scale: 1.1,\n                      rotateY: 10,\n                      z: 30\n                    }}\n                    style={{ transformStyle: 'preserve-3d' }}\n                  >\n                    <Badge variant=\"secondary\" className=\"bg-white/90 text-gray-800 shadow-lg\">\n                      {project.category}\n                    </Badge>\n                  </motion.div>\n                </motion.div>\n                \n                <CardHeader style={{ transform: 'translateZ(25px)' }}>\n                  <motion.div\n                    whileHover={{ scale: 1.02, z: 10 }}\n                    style={{ transformStyle: 'preserve-3d' }}\n                  >\n                    <CardTitle className=\"text-xl font-bold leading-tight\">\n                      {project.title}\n                    </CardTitle>\n                  </motion.div>\n                  <motion.div\n                    whileHover={{ \n                      color: 'rgb(59, 130, 246)',\n                      transition: { duration: 0.3 }\n                    }}\n                  >\n                    <CardDescription className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                      {project.description}\n                    </CardDescription>\n                  </motion.div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\" style={{ transform: 'translateZ(15px)' }}>\n                  {/* Technologies */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    {project.technologies.map((tech) => (\n                      <Badge key={tech} variant=\"outline\" className=\"text-xs\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n                  \n                  {/* Key Features */}\n                  <div>\n                    <h4 className=\"font-medium mb-2 text-sm\">Key Features:</h4>\n                    <ul className=\"text-sm text-gray-600 dark:text-gray-300 space-y-1\">\n                      {project.features.slice(0, 3).map((feature, i) => (\n                        <li key={i} className=\"flex items-start\">\n                          <div className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0\" />\n                          {feature}\n                        </li>\n                      ))}\n                      {project.features.length > 3 && (\n                        <li className=\"text-blue-600 dark:text-blue-400 text-xs\">\n                          +{project.features.length - 3} more features\n                        </li>\n                      )}\n                    </ul>\n                  </div>\n                </CardContent>\n                \n                <CardFooter className=\"flex space-x-2 pt-4\" style={{ transform: 'translateZ(35px)' }}>\n                  <motion.div\n                    className=\"flex-1\"\n                    style={{ transformStyle: 'preserve-3d' }}\n                  >\n                    <Button \n                      asChild\n                      className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg\"\n                    >\n                      <a href={project.demoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <ExternalLink className=\"mr-2 h-4 w-4\" />\n                        Live Demo\n                      </a>\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div\n                    className=\"flex-1\"\n                    style={{ transformStyle: 'preserve-3d' }}\n                  >\n                    <Button \n                      asChild\n                      variant=\"outline\"\n                      className=\"w-full shadow-lg\"\n                    >\n                      <a href={project.codeUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Github className=\"mr-2 h-4 w-4\" />\n                        View Code\n                      </a>\n                    </Button>\n                  </motion.div>\n                </CardFooter>\n                </Card>\n              </motion.div>\n            </motion.div>\n            );\n          })}\n        </div>\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":12994},"client/src/components/SkillsSection.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useEnhancedScrollAnimation, useContainerHoverEffect } from '@/hooks/useBidirectionalScroll';\nimport { Code, Server, Brain, ChevronRight } from 'lucide-react';\nimport { \n  SiReact, \n  SiJavascript, \n  SiHtml5, \n  SiCss3, \n  SiTailwindcss, \n  SiNodedotjs, \n  SiPython, \n  SiExpress, \n  SiMysql, \n  SiMongodb, \n  SiGooglecloud,\n  SiTensorflow\n} from 'react-icons/si';\nimport { FaMobile, FaBrain, FaRobot, FaChartLine } from 'react-icons/fa';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport portfolioData from '@/data/portfolio-data';\n\nconst skillIcons = {\n  code: Code,\n  server: Server,\n  brain: Brain,\n};\n\n// Technology-specific icons with their original colors\nconst techIcons = {\n  'React.js': { icon: SiReact, color: '#61DAFB' },\n  'JavaScript': { icon: SiJavascript, color: '#F7DF1E' },\n  'HTML5': { icon: SiHtml5, color: '#E34F26' },\n  'CSS3': { icon: SiCss3, color: '#1572B6' },\n  'Tailwind CSS': { icon: SiTailwindcss, color: '#06B6D4' },\n  'Responsive Design': { icon: FaMobile, color: '#4285F4' },\n  'Node.js': { icon: SiNodedotjs, color: '#339933' },\n  'Python': { icon: SiPython, color: '#3776AB' },\n  'Express.js': { icon: SiExpress, color: '#000000' },\n  'MySQL': { icon: SiMysql, color: '#4479A1' },\n  'MongoDB': { icon: SiMongodb, color: '#47A248' },\n  'Machine Learning': { icon: SiTensorflow, color: '#FF6F00' },\n  'AI Agents': { icon: FaRobot, color: '#9B59B6' },\n  'Google Cloud': { icon: SiGooglecloud, color: '#4285F4' },\n  'Data Science': { icon: FaChartLine, color: '#2ECC71' },\n};\n\nconst skillCategories = [\n  {\n    id: 'frontend',\n    title: 'Frontend',\n    icon: 'code',\n    color: 'from-blue-500 to-cyan-500',\n    skills: portfolioData.skills.frontend,\n  },\n  {\n    id: 'backend',\n    title: 'Backend',\n    icon: 'server',\n    color: 'from-green-500 to-emerald-500',\n    skills: portfolioData.skills.backend,\n  },\n  {\n    id: 'aicloud',\n    title: 'AI & Cloud',\n    icon: 'brain',\n    color: 'from-purple-500 to-pink-500',\n    skills: portfolioData.skills.aicloud,\n  },\n];\n\nexport default function SkillsSection() {\n  const [selectedSkill, setSelectedSkill] = useState<string | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerHover = useContainerHoverEffect();\n\n  const handleSkillClick = (skillName: string) => {\n    setSelectedSkill(selectedSkill === skillName ? null : skillName);\n    // Here you could implement showing demo projects or examples\n    console.log(`Clicked on ${skillName} - implement demo showcase`);\n  };\n\n  return (\n    <section \n      id=\"skills\" \n      ref={containerRef}\n      className=\"py-20 px-6 bg-gradient-to-br from-gray-50 via-slate-50 to-purple-50 dark:from-slate-800 dark:via-slate-900 dark:to-purple-900 relative overflow-hidden\"\n    >\n      {/* Background decoration */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-32 -left-32 w-64 h-64 bg-gradient-to-r from-cyan-400/20 to-blue-600/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-32 -right-32 w-64 h-64 bg-gradient-to-r from-purple-400/20 to-pink-600/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-green-400/10 to-emerald-600/10 rounded-full blur-3xl\"></div>\n      </div>\n      \n      <div className=\"max-w-6xl mx-auto relative z-10\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Skills & Expertise\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">Technologies I work with</p>\n        </motion.div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {skillCategories.map((category, categoryIndex) => {\n            const IconComponent = skillIcons[category.icon as keyof typeof skillIcons];\n            const skillAnimation = useEnhancedScrollAnimation(containerRef, categoryIndex, skillCategories.length);\n            \n            return (\n              <motion.div\n                key={category.id}\n                style={{\n                  y: skillAnimation.y,\n                  opacity: skillAnimation.opacity,\n                  scale: skillAnimation.scale\n                }}\n                initial={{ opacity: 0, y: 60 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ \n                  duration: 1.0, \n                  delay: categoryIndex * 0.3,\n                  type: \"spring\",\n                  stiffness: 80,\n                  damping: 20,\n                  mass: 1.2\n                }}\n                viewport={{ once: false, amount: 0.3 }}\n                {...containerHover}\n                data-id={`skills-${category.id}`}\n                data-testid={`skills-card-${category.id}`}\n              >\n                <Card className=\"h-full hover:shadow-2xl transition-all duration-500 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-white/20 dark:border-slate-700/30 hover:bg-white/95 dark:hover:bg-slate-800/95 hover:transform hover:scale-105\">\n                  <CardHeader>\n                    <div className=\"flex items-center mb-4\">\n                      <div className={`w-12 h-12 bg-gradient-to-r ${category.color} rounded-lg flex items-center justify-center mr-4`}>\n                        <IconComponent className=\"text-white h-6 w-6\" />\n                      </div>\n                      <CardTitle className=\"text-xl\">{category.title}</CardTitle>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {category.skills.map((skill) => {\n                        const techIcon = techIcons[skill.name as keyof typeof techIcons];\n                        const IconComponent = techIcon?.icon || FaBrain;\n                        const iconColor = techIcon?.color || '#3B82F6';\n                        \n                        return (\n                          <motion.div\n                            key={skill.name}\n                            whileHover={{ \n                              scale: 1.02, \n                              x: 4,\n                              transition: { \n                                duration: 0.4,\n                                ease: \"easeOut\"\n                              }\n                            }}\n                            className=\"flex items-center justify-between cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700 p-3 rounded-lg transition-all duration-300 group\"\n                            onClick={() => handleSkillClick(skill.name)}\n                          >\n                            <div className=\"flex items-center\">\n                              <motion.div \n                                className=\"w-8 h-8 flex items-center justify-center mr-3 rounded-lg bg-white dark:bg-slate-600 shadow-sm group-hover:shadow-md transition-all duration-300\"\n                                whileHover={{ \n                                  rotate: 5, \n                                  scale: 1.1,\n                                  transition: { \n                                    duration: 0.4,\n                                    ease: \"easeOut\",\n                                    type: \"spring\",\n                                    stiffness: 200,\n                                    damping: 15\n                                  }\n                                }}\n                                style={{ \n                                  filter: `drop-shadow(0 0 8px ${iconColor}40)`,\n                                }}\n                              >\n                                <IconComponent \n                                  className=\"w-5 h-5\" \n                                  style={{ color: iconColor }}\n                                />\n                              </motion.div>\n                              <span className=\"font-medium group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\">\n                                {skill.name}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <motion.div\n                                whileHover={{ x: 2 }}\n                                transition={{ duration: 0.2 }}\n                              >\n                                <ChevronRight className=\"h-4 w-4 text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\" />\n                              </motion.div>\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        {/* Skill Detail Modal/Overlay */}\n        <AnimatePresence>\n          {selectedSkill && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-6\"\n              onClick={() => setSelectedSkill(null)}\n            >\n              <motion.div\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                className=\"bg-white dark:bg-slate-800 rounded-xl p-6 max-w-md w-full\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <h3 className=\"text-xl font-bold mb-4\">{selectedSkill}</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Click here to view projects and examples using {selectedSkill}\n                </p>\n                <Button\n                  onClick={() => setSelectedSkill(null)}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  Close\n                </Button>\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10817},"client/src/components/TestimonialsSection.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ChevronLeft, ChevronRight, Quote } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nconst testimonials = [\n  {\n    id: 1,\n    quote: \"Ravi's expertise in full-stack development and AI integration is exceptional. He delivered our project ahead of schedule with outstanding quality.\",\n    author: \"John Smith\",\n    role: \"CTO, Tech Solutions Inc.\",\n    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n  },\n  {\n    id: 2,\n    quote: \"Working with Ravi was a pleasure. His attention to detail and innovative approach to problem-solving made our collaboration highly successful.\",\n    author: \"Sarah Johnson\",\n    role: \"Product Manager, Innovation Labs\",\n    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b787?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n  },\n  {\n    id: 3,\n    quote: \"Ravi's technical skills and professional demeanor make him an invaluable team member. His contributions to our AI initiatives were outstanding.\",\n    author: \"Michael Chen\",\n    role: \"Lead Developer, AI Solutions\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n  },\n];\n\nexport default function TestimonialsSection() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isAutoPlay, setIsAutoPlay] = useState(true);\n\n  const nextTestimonial = () => {\n    setCurrentIndex((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const prevTestimonial = () => {\n    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  useEffect(() => {\n    if (!isAutoPlay) return;\n\n    const interval = setInterval(nextTestimonial, 5000);\n    return () => clearInterval(interval);\n  }, [isAutoPlay, currentIndex]);\n\n  return (\n    <section className=\"py-20 px-6 bg-gray-50 dark:bg-slate-800\">\n      <div className=\"max-w-6xl mx-auto\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Testimonials\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">What colleagues say about my work</p>\n        </motion.div>\n        \n        {/* Testimonials Carousel */}\n        <div \n          className=\"relative overflow-hidden rounded-xl\"\n          onMouseEnter={() => setIsAutoPlay(false)}\n          onMouseLeave={() => setIsAutoPlay(true)}\n        >\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentIndex}\n              initial={{ opacity: 0, x: 100 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -100 }}\n              transition={{ duration: 0.5 }}\n              className=\"px-4\"\n            >\n              <Card className=\"max-w-4xl mx-auto shadow-xl\">\n                <CardContent className=\"p-8 text-center\">\n                  <Quote className=\"h-12 w-12 text-blue-600 dark:text-blue-400 mx-auto mb-6\" />\n                  \n                  <blockquote className=\"text-lg text-gray-600 dark:text-gray-300 mb-8 italic leading-relaxed\">\n                    \"{testimonials[currentIndex].quote}\"\n                  </blockquote>\n                  \n                  <div className=\"flex items-center justify-center\">\n                    <Avatar className=\"h-16 w-16 mr-4\">\n                      <AvatarImage src={testimonials[currentIndex].avatar} />\n                      <AvatarFallback>\n                        {testimonials[currentIndex].author.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"text-left\">\n                      <div className=\"font-bold text-lg\">{testimonials[currentIndex].author}</div>\n                      <div className=\"text-gray-600 dark:text-gray-400\">{testimonials[currentIndex].role}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </AnimatePresence>\n          \n          {/* Navigation Controls */}\n          <div className=\"flex items-center justify-center mt-8 space-x-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={prevTestimonial}\n              className=\"p-2\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            \n            {/* Indicators */}\n            <div className=\"flex space-x-2\">\n              {testimonials.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => goToSlide(index)}\n                  className={`w-3 h-3 rounded-full transition-colors ${\n                    index === currentIndex \n                      ? 'bg-blue-600' \n                      : 'bg-gray-300 dark:bg-gray-600'\n                  }`}\n                />\n              ))}\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={nextTestimonial}\n              className=\"p-2\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5868},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1321},"client/src/data/portfolio-data.ts":{"content":"export const portfolioData = {\n  personal: {\n    name: \"Ravi Karingu\",\n    title: \"Associate Software Engineer at Syneriq Global\",\n    subtitle: \"Full Stack Developer & AI Enthusiast\",\n    bio: \"I'm always eager to connect with fellow tech enthusiasts, creators, and professionals who share my passion for technology, learning, and growth. I specialize in Python, React.js, Machine Learning, and Data Science to build intelligent systems that solve real-world problems and make a lasting impact.\",\n    location: \"Hyderabad, Telangana, India\",\n    email: \"karinguravi37@gmail.com\",\n    phone: \"+91-9999999999\",\n    profileImage: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1740764167/My_Photo_optimized_ahbfx5.jpg\",\n    resumeLink: \"https://drive.google.com/file/d/1sfHsTzi_OMtzj8_GBgeZkmiraeps472-/view?usp=sharing\",\n    github: \"https://github.com/KARINGU-RAVI\",\n    linkedin: \"https://www.linkedin.com/in/ravikaringu\",\n    twitter: \"https://x.com/RAVIKaringu1\",\n    logo: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1689959301/ravikaringu_armwif.png\"\n  },\n  \n  experiences: [\n    {\n      id: \"exp-01\",\n      title: \"Associate Software Engineer\",\n      company: \"Syneriq Global\",\n      location: \"Hyderabad, Telangana, India\",\n      duration: \"Jul 2025 - Present\",\n      type: \"Full-time\",\n      description: \"Working on exciting technologies including Machine Learning, AI Agents, and more. Building intelligent systems and solving real-world problems through code and innovation.\",\n      skills: [\"Machine Learning\", \"AI Agents\", \"Python\", \"React.js\", \"Node.js\"],\n      current: true\n    },\n    {\n      id: \"exp-02\",\n      title: \"Google Cloud Generative AI Intern\",\n      company: \"SmartInternz\",\n      location: \"Remote\",\n      duration: \"Sep 2024 - Oct 2024\",\n      type: \"Internship\",\n      description: \"Successfully completed a Virtual Internship Program on Google Cloud Generative AI in collaboration with AICTE. Gained hands-on exposure to the fundamentals and applications of Generative AI using Google Cloud tools.\",\n      skills: [\"Google Cloud\", \"Generative AI\", \"Machine Learning\", \"Python\"],\n      current: false\n    },\n    {\n      id: \"exp-03\",\n      title: \"Front-End Web Development Intern\",\n      company: \"Next24tech Technology & Services LLP\",\n      location: \"Remote\",\n      duration: \"May 2024 - Jul 2024\",\n      type: \"Internship\",\n      description: \"Completed AICTE-approved internship in Front-End Web Development. Gained hands-on experience in building user-friendly interfaces using modern web technologies.\",\n      skills: [\"HTML5\", \"CSS3\", \"JavaScript\", \"React.js\", \"Responsive Design\"],\n      current: false\n    }\n  ],\n\n  skills: {\n    frontend: [\n      { name: \"React.js\", icon: \"react\" },\n      { name: \"JavaScript\", icon: \"javascript\" },\n      { name: \"HTML5\", icon: \"html5\" },\n      { name: \"CSS3\", icon: \"css3\" },\n      { name: \"Tailwind CSS\", icon: \"tailwind\" },\n      { name: \"Responsive Design\", icon: \"mobile\" }\n    ],\n    backend: [\n      { name: \"Node.js\", icon: \"nodejs\" },\n      { name: \"Python\", icon: \"python\" },\n      { name: \"Express.js\", icon: \"express\" },\n      { name: \"MySQL\", icon: \"mysql\" },\n      { name: \"MongoDB\", icon: \"mongodb\" }\n    ],\n    aicloud: [\n      { name: \"Machine Learning\", icon: \"brain\" },\n      { name: \"AI Agents\", icon: \"robot\" },\n      { name: \"Google Cloud\", icon: \"cloud\" },\n      { name: \"Data Science\", icon: \"chart\" }\n    ]\n  },\n\n  projects: [\n    {\n      id: \"proj-01\",\n      title: \"Disaster Prediction Using Machine Learning\",\n      description: \"Research project focusing on leveraging machine learning to predict natural disasters like earthquakes, floods, tsunamis, and landslides using Random Forest and XGBoost algorithms.\",\n      image: \"https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n      technologies: [\"Python\", \"Machine Learning\", \"Random Forest\", \"XGBoost\", \"Data Science\"],\n      features: [\n        \"Multi-model ML approach for disaster prediction\",\n        \"Real-time data processing and analysis\",\n        \"Enhanced disaster preparedness systems\",\n        \"Published in ICMDRI 2K25 conference\"\n      ],\n      demoUrl: \"#\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/Disaster_Prediction_Using_Machine_Learning_Alogrithms\",\n      category: \"Machine Learning\"\n    },\n    {\n      id: \"proj-02\",\n      title: \"Emoji Match Game – Fun & Interactive Memory Game\",\n      description: \"An engaging and interactive memory-based web application designed to test users' pattern recognition skills. The game challenges players to click on unique emojis without repeating selections.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756990/Screenshot_2025-08-21_114621_rqodgo.png\",\n      technologies: [\"React.js\", \"JavaScript\", \"CSS3\"],\n      features: [\n        \"Dynamic Emoji Grid with random shuffling\",\n        \"Score Tracking with current and best scores\",\n        \"Game Logic that ends on repeated emoji clicks\",\n        \"Responsive UI optimized for all devices\"\n      ],\n      demoUrl: \"https://raviemojigame00.ccbp.tech/\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/match_game\",\n      category: \"Game Development\"\n    },\n    {\n      id: \"proj-03\",\n      title: \"Jobby App\",\n      description: \"A dynamic job search platform designed to help users find employment opportunities efficiently. Provides an interactive and user-friendly interface for job seekers.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755757039/Screenshot_2025-08-21_114709_thwfos.png\",\n      technologies: [\"React.js\", \"CSS3\", \"JavaScript\", \"JWT\", \"API Integration\"],\n      features: [\n        \"User Authentication with JWT tokens\",\n        \"Dynamic Job Listings with real-time data\",\n        \"Advanced Filters & Search Functionality\",\n        \"Responsive UI built with React.js\",\n        \"Protected Routes with authentication checks\"\n      ],\n      demoUrl: \"https://ravijobbyapp0.ccbp.tech/login\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/Jobby-App\",\n      category: \"Web Application\"\n    },\n    {\n      id: \"proj-04\",\n      title: \"Todos Application\",\n      description: \"A task management solution, designed to make life easier. Streamlined task management through a combination of HTML, CSS, and Bootstrap for an intuitive interface.\",\n      image: \"https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"Bootstrap\"],\n      features: [\n        \"Streamlined task management with intuitive interface\",\n        \"Seamless CRUD operations through JavaScript event listeners\",\n        \"Dynamic UI updates for real-time interaction\",\n        \"Secure task persistence with local storage methods\"\n      ],\n      demoUrl: \"https://ravitodolist0.ccbp.tech\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/TodoApp\",\n      category: \"Web Application\"\n    },\n    {\n      id: \"proj-05\",\n      title: \"Countries Search\",\n      description: \"A global countries database and search engine, providing instant access to countries and their respective populations. Features asynchronous data retrieval through REST API calls.\",\n      image: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"REST API\", \"Bootstrap\"],\n      features: [\n        \"Asynchronous data retrieval through REST API calls\",\n        \"Bootstrap and CSS for responsive design\",\n        \"Local search functionality with JavaScript event listeners\",\n        \"Array filter methods for efficient searching\"\n      ],\n      demoUrl: \"https://ravicountries0.ccbp.tech\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/Destination-Search\",\n      category: \"Web Application\"\n    },\n    {\n      id: \"proj-06\",\n      title: \"Wikipedia Search Application\",\n      description: \"A Wikipedia search application that simplifies access to information with features like search, user-friendly interface, and multimedia support.\",\n      image: \"https://images.unsplash.com/photo-1521587760476-6c12a4b040da?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"Bootstrap\"],\n      features: [\n        \"Simple and intuitive search interface\",\n        \"Real-time Wikipedia content retrieval\",\n        \"Responsive design with Bootstrap\",\n        \"Clean and user-friendly interface\"\n      ],\n      demoUrl: \"https://raviwikipedia0.ccbp.tech\",\n      codeUrl: \"#\",\n      category: \"Web Application\"\n    },\n    {\n      id: \"proj-07\",\n      title: \"IPL Dashboard\",\n      description: \"Built an interactive hub for IPL teams and matches information. Navigate seamlessly with React Router, presenting team details and matches with REST API calls.\",\n      image: \"https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n      technologies: [\"React JS\", \"React Router\", \"REST API\", \"CSS\", \"Bootstrap\"],\n      features: [\n        \"Interactive hub for IPL teams and matches\",\n        \"Seamless navigation with React Router\",\n        \"Team details and matches with REST API calls\",\n        \"Custom 404 page for non-existent routes\"\n      ],\n      demoUrl: \"https://raviiplboard.ccbp.tech\",\n      codeUrl: \"https://github.com/KARINGU-RAVI/IPL-Dash-Board-App\",\n      category: \"Web Application\"\n    }\n  ],\n\n  achievements: [\n    {\n      id: \"ach-01\",\n      title: \"Class Topper - B.Tech CSE (Data Science), 4-2 Semester\",\n      issuer: \"Siddhartha Institute of Engineering and Technology\",\n      date: \"Apr 2025\",\n      description: \"Recognized as Class 1st Topper in Computer Science and Engineering (Data Science) during final semester. This achievement reflects consistent academic dedication, strong problem-solving abilities, and passion for data-driven technologies.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756938/Topper_of_class_jqytgd.jpg\"\n    },\n    {\n      id: \"ach-02\",\n      title: \"1st Place – Debugging & Technical Quiz Champion\",\n      issuer: \"Siddhartha Institute of Engineering & Technology\",\n      date: \"Mar 2025\",\n      description: \"Awarded 1st place in Debugging and Technical Quiz competition competing against 500 participants. Demonstrated strong problem-solving, debugging, and technical knowledge across data structures, algorithms, and software development.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756938/Debugging_2k25_kb33j1.jpg\"\n    },\n    {\n      id: \"ach-03\",\n      title: \"Research Publication - Disaster Prediction Using Machine Learning\",\n      issuer: \"ICMDRI 2K25\",\n      date: \"2025\",\n      description: \"Published research paper 'Disaster Prediction Using Machine Learning Algorithms' in International Conference on Multi-Disciplinary Research and Innovations 2K25. Research focuses on leveraging ML to predict natural disasters using Random Forest and XGBoost algorithms.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755765436/Screenshot_2025-08-21_140607_npioce.png\"\n    },\n    {\n      id: \"ach-04\",\n      title: \"NPTEL IoT Gold Medal Achievement\",\n      issuer: \"NPTEL\",\n      date: \"Oct 2024\",\n      description: \"Awarded Gold Medal in NPTEL Internet of Things (IoT) certification exam, securing 90% marks. Demonstrates strong analytical skills and deep understanding of IoT architecture, embedded systems, networking, and security.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756938/NPTEL_certificate_uhm4is.jpg\"\n    },\n    {\n      id: \"ach-05\",\n      title: \"Technical Quiz Champion\",\n      issuer: \"Siddhartha Institute of Engineering & Technology\",\n      date: \"2025\",\n      description: \"Awarded 1st place in Technical Quiz competition. Demonstrated strong technical knowledge across various programming concepts and technologies.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756938/Technical_Quiz_dejadd.jpg\"\n    },\n    {\n      id: \"ach-06\",\n      title: \"Debugging Champion\",\n      issuer: \"Siddhartha Institute of Engineering & Technology\",\n      date: \"Dec 2023\",\n      description: \"Awarded 1st place in Debugging competition at SIET. Demonstrated strong problem-solving skills by efficiently identifying and fixing complex code errors under time constraints.\",\n      image: \"https://res.cloudinary.com/dumu7y8az/image/upload/v1755756938/Debugging_2k23_dq9nmz.jpg\"\n    }\n  ],\n\n  certifications: [\n    {\n      id: \"cert-01\",\n      title: \"Full Stack Developer\",\n      issuer: \"OneRoadmap\",\n      date: \"Jun 2025\",\n      credentialId: \"CERT-9D51523E\"\n    },\n    {\n      id: \"cert-02\",\n      title: \"Oracle Cloud Infrastructure 2025 Certified AI Foundations Associate\",\n      issuer: \"Oracle\",\n      date: \"Mar 2025\",\n      credentialId: \"101697461OCI25AICFA\"\n    }\n  ],\n\n  education: [\n    {\n      id: \"edu-01\",\n      degree: \"Bachelor's degree in Computer Science (Data Science)\",\n      institution: \"Siddhartha Institute of Engineering & Technology\",\n      duration: \"2022 - 2025\",\n      grade: \"8.35 CGPA\",\n      description: \"Specialized in Data Science with focus on Machine Learning, AI, and Full-Stack Development.\"\n    }\n  ]\n};\n\nexport default portfolioData;\n","size_bytes":13309},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAISearch.ts":{"content":"import { useState } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface SearchResult {\n  results: string[];\n}\n\nexport function useAISearch() {\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<string[]>([]);\n\n  const search = async (query: string): Promise<string[]> => {\n    if (!query.trim()) return [];\n\n    setIsSearching(true);\n    try {\n      const response = await apiRequest('POST', '/api/portfolio-search', { query });\n      const data: SearchResult = await response.json();\n      setSearchResults(data.results);\n      return data.results;\n    } catch (error) {\n      console.error('Search failed:', error);\n      setSearchResults([]);\n      return [];\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  return {\n    search,\n    isSearching,\n    searchResults,\n    clearResults: () => setSearchResults([])\n  };\n}\n","size_bytes":911},"client/src/hooks/useBidirectionalScroll.ts":{"content":"import { useEffect, useState, useRef } from 'react';\nimport { useScroll, useTransform, useSpring } from 'framer-motion';\n\ninterface ScrollDirection {\n  direction: 'up' | 'down';\n  isScrolling: boolean;\n}\n\nexport function useBidirectionalScroll(threshold = 0.1) {\n  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>({\n    direction: 'down',\n    isScrolling: false\n  });\n  const lastScrollY = useRef(0);\n  const scrollTimeout = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      const direction = currentScrollY > lastScrollY.current ? 'down' : 'up';\n      \n      setScrollDirection({\n        direction,\n        isScrolling: true\n      });\n\n      // Clear existing timeout and set new one\n      if (scrollTimeout.current) {\n        clearTimeout(scrollTimeout.current);\n      }\n      \n      scrollTimeout.current = setTimeout(() => {\n        setScrollDirection(prev => ({ ...prev, isScrolling: false }));\n      }, 150);\n\n      lastScrollY.current = currentScrollY;\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      if (scrollTimeout.current) {\n        clearTimeout(scrollTimeout.current);\n      }\n    };\n  }, []);\n\n  return scrollDirection;\n}\n\nexport function useEnhancedScrollAnimation(\n  containerRef: React.RefObject<HTMLElement>,\n  index: number = 0,\n  totalItems: number = 1\n) {\n  const scrollDirection = useBidirectionalScroll();\n  \n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start 0.9\", \"end 0.1\"]\n  });\n\n  // Enhanced bidirectional animations that respond to scroll direction\n  // When scrolling down: slide in from top (negative y) and fade in\n  // When scrolling up: slide out to top (negative y) and fade out\n  const y = useSpring(\n    useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [80, 0, 0, -80]),\n    { stiffness: 120, damping: 25, mass: 1.2 }\n  );\n  \n  const opacity = useSpring(\n    useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0]),\n    { stiffness: 120, damping: 25, mass: 1.2 }\n  );\n  \n  const scale = useSpring(\n    useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0.92, 1, 1, 0.92]),\n    { stiffness: 120, damping: 25, mass: 1.2 }\n  );\n\n  // Calculate staggered animation delays based on index\n  const delay = index * 0.1;\n  \n  // Calculate initial position for elements (semi-circular entry)\n  const angle = (index / Math.max(totalItems - 1, 1)) * Math.PI;\n  const radius = 150;\n  const initialX = -Math.cos(angle) * radius;\n  const initialY = Math.sin(angle) * radius * 0.5;\n  \n  return {\n    scrollDirection,\n    scrollYProgress,\n    y,\n    opacity,\n    scale,\n    delay,\n    initialPosition: { x: initialX, y: initialY },\n    angle\n  };\n}\n\n// New hook specifically for container hover effects\nexport function useContainerHoverEffect() {\n  return {\n    whileHover: { \n      scale: 1.02,\n      y: -5,\n      transition: { \n        duration: 0.5,\n        ease: \"easeOut\",\n        type: \"spring\",\n        stiffness: 200,\n        damping: 20\n      }\n    },\n    whileTap: { \n      scale: 0.98,\n      transition: { \n        duration: 0.2,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n}","size_bytes":3272},"client/src/hooks/useGitHub.ts":{"content":"import { useQuery } from '@tanstack/react-query';\n\ninterface GitHubEvent {\n  id: string;\n  type: string;\n  repo: {\n    name: string;\n  };\n  created_at: string;\n  payload: any;\n}\n\ninterface GitHubStats {\n  repositories: number;\n  followers: number;\n  following: number;\n  totalStars: number;\n  totalForks: number;\n}\n\nexport function useGitHubActivity() {\n  return useQuery({\n    queryKey: ['/api/github-activity'],\n    select: (data: GitHubEvent[]) => data.slice(0, 5), // Show only recent 5 activities\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useGitHubStats() {\n  return useQuery<GitHubStats>({\n    queryKey: ['/api/github-stats'],\n    staleTime: 15 * 60 * 1000, // 15 minutes\n  });\n}\n","size_bytes":712},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import React from 'react';\nimport { Bot } from 'lucide-react';\nimport { ThemeProvider } from '@/components/ThemeProvider';\nimport Navbar from '@/components/Navbar';\nimport HeroSection from '@/components/HeroSection';\nimport ExperienceSection from '@/components/ExperienceSection';\nimport SkillsSection from '@/components/SkillsSection';\nimport ProjectsSection from '@/components/ProjectsSection';\nimport AchievementsSection from '@/components/AchievementsSection';\nimport ContactSection from '@/components/ContactSection';\nimport Footer from '@/components/Footer';\nimport Chatbot from '@/components/Chatbot';\nimport { Button } from '@/components/ui/button';\nimport { useChatbot } from '@/hooks/useChatbot';\n\nexport default function Home() {\n  const chatbot = useChatbot();\n\n  return (\n    <ThemeProvider>\n      <div className=\"min-h-screen bg-white dark:bg-slate-900 text-gray-900 dark:text-gray-100 transition-colors duration-300\">\n        <Navbar />\n        <main>\n          <HeroSection />\n          <ExperienceSection />\n          <SkillsSection />\n          <ProjectsSection />\n          <AchievementsSection />\n          <ContactSection />\n        </main>\n        <Footer />\n        \n        {/* Floating Chatbot Button */}\n        <Button\n          onClick={chatbot.openChatbot}\n          className=\"fixed bottom-6 right-6 w-14 h-14 rounded-full bg-blue-500 hover:bg-blue-600 shadow-lg z-50 p-0\"\n          aria-label=\"Open AI Portfolio Assistant\"\n        >\n          <Bot className=\"h-6 w-6\" />\n        </Button>\n        \n        {/* Chatbot Component */}\n        <Chatbot {...chatbot} />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":1637},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Chatbot.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Send, Bot, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\nconst suggestedQuestions = [\n  \"What projects have you worked on?\",\n  \"What are your key skills?\",\n  \"Tell me about your experience at Syneriq Global\",\n  \"What achievements do you have?\",\n  \"What technologies do you work with?\",\n  \"Tell me about your education background\"\n];\n\ninterface ChatbotProps {\n  messages: Array<{\n    id: string;\n    message: string;\n    isBot: boolean;\n    timestamp: Date;\n  }>;\n  isLoading: boolean;\n  isOpen: boolean;\n  sendMessage: (message: string) => Promise<void>;\n  closeChatbot: () => void;\n}\n\nexport default function Chatbot({ \n  messages, \n  isLoading, \n  isOpen, \n  sendMessage, \n  closeChatbot \n}: ChatbotProps) {\n  const [inputMessage, setInputMessage] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputMessage.trim() || isLoading) return;\n\n    await sendMessage(inputMessage);\n    setInputMessage('');\n  };\n\n  const handleSuggestedQuestion = (question: string) => {\n    sendMessage(question);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, scale: 0.8, y: 50 }}\n        animate={{ opacity: 1, scale: 1, y: 0 }}\n        exit={{ opacity: 0, scale: 0.8, y: 50 }}\n        className=\"fixed bottom-20 right-6 w-96 h-[500px] bg-white dark:bg-slate-800 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 z-50 flex flex-col\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">Portfolio Assistant</h3>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">Ask me about Ravi's portfolio</p>\n            </div>\n          </div>\n          <Button\n            onClick={closeChatbot}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-1\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-lg p-3 ${\n                  message.isBot\n                    ? 'bg-gray-100 dark:bg-slate-700 text-gray-900 dark:text-gray-100'\n                    : 'bg-blue-500 text-white'\n                }`}\n              >\n                <div className=\"flex items-start space-x-2\">\n                  {message.isBot && (\n                    <Bot className=\"w-4 h-4 mt-0.5 text-blue-500\" />\n                  )}\n                  {!message.isBot && (\n                    <User className=\"w-4 h-4 mt-0.5\" />\n                  )}\n                  <p className=\"text-sm leading-relaxed\">{message.message}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {/* Suggested Questions */}\n          {messages.length <= 1 && (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 font-medium\">\n                Suggested questions:\n              </p>\n              <div className=\"grid gap-2\">\n                {suggestedQuestions.map((question, index) => (\n                  <Button\n                    key={index}\n                    onClick={() => handleSuggestedQuestion(question)}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-left justify-start h-auto py-2 px-3 text-xs\"\n                    disabled={isLoading}\n                  >\n                    {question}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-gray-100 dark:bg-slate-700 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Bot className=\"w-4 h-4 text-blue-500\" />\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input */}\n        <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n          <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n            <Input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              placeholder=\"Ask me anything about the portfolio...\"\n              disabled={isLoading}\n              className=\"flex-1\"\n            />\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !inputMessage.trim()}\n              size=\"sm\"\n              className=\"px-3\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </form>\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","size_bytes":6159},"client/src/hooks/useChatbot.ts":{"content":"import { useState } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  isBot: boolean;\n  timestamp: Date;\n}\n\nexport function useChatbot() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const sendMessage = async (message: string): Promise<void> => {\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      message: message.trim(),\n      isBot: false,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest('POST', '/api/chatbot', { message });\n      const data = await response.json();\n\n      // Add bot response\n      const botMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        message: data.response,\n        isBot: true,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Chatbot error:', error);\n      \n      // Add error message\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        message: \"I'm sorry, I'm having trouble processing your request right now. Please try again later.\",\n        isBot: true,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const openChatbot = () => {\n    setIsOpen(true);\n    \n    // Add welcome message if no messages exist\n    if (messages.length === 0) {\n      const welcomeMessage: ChatMessage = {\n        id: 'welcome',\n        message: \"Hi! I'm here to help you learn about Ravi Karingu's professional background. You can ask me about his projects, skills, experience, or achievements!\",\n        isBot: true,\n        timestamp: new Date(),\n      };\n      setMessages([welcomeMessage]);\n    }\n  };\n\n  const closeChatbot = () => {\n    setIsOpen(false);\n  };\n\n  return {\n    messages,\n    isLoading,\n    isOpen,\n    sendMessage,\n    clearMessages,\n    openChatbot,\n    closeChatbot,\n  };\n}","size_bytes":2308}},"version":1}